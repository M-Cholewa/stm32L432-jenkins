
stm32L432-jenkins.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080040b8  080040b8  000140b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004140  08004140  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08004140  08004140  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004140  08004140  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004140  08004140  00014140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004144  08004144  00014144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004148  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b04  20000060  080041a8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b64  080041a8  00021b64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eccf  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002602  00000000  00000000  0002eda2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d20  00000000  00000000  000313a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009da  00000000  00000000  000320c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002ab4  00000000  00000000  00032aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e714  00000000  00000000  00035556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c371f  00000000  00000000  00043c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003710  00000000  00000000  0010738c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0010aa9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080040a0 	.word	0x080040a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080040a0 	.word	0x080040a0

080001d0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of vMainTask */
  vMainTaskHandle = osThreadNew(StartDefaultTask, NULL, &vMainTask_attributes);
 80001d4:	4a04      	ldr	r2, [pc, #16]	; (80001e8 <MX_FREERTOS_Init+0x18>)
 80001d6:	2100      	movs	r1, #0
 80001d8:	4804      	ldr	r0, [pc, #16]	; (80001ec <MX_FREERTOS_Init+0x1c>)
 80001da:	f001 f949 	bl	8001470 <osThreadNew>
 80001de:	4603      	mov	r3, r0
 80001e0:	4a03      	ldr	r2, [pc, #12]	; (80001f0 <MX_FREERTOS_Init+0x20>)
 80001e2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80001e4:	bf00      	nop
 80001e6:	bd80      	pop	{r7, pc}
 80001e8:	080040dc 	.word	0x080040dc
 80001ec:	080001f5 	.word	0x080001f5
 80001f0:	2000007c 	.word	0x2000007c

080001f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80001fc:	2001      	movs	r0, #1
 80001fe:	f001 f9c9 	bl	8001594 <osDelay>
 8000202:	e7fb      	b.n	80001fc <StartDefaultTask+0x8>

08000204 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800020a:	4b09      	ldr	r3, [pc, #36]	; (8000230 <MX_GPIO_Init+0x2c>)
 800020c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800020e:	4a08      	ldr	r2, [pc, #32]	; (8000230 <MX_GPIO_Init+0x2c>)
 8000210:	f043 0301 	orr.w	r3, r3, #1
 8000214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000216:	4b06      	ldr	r3, [pc, #24]	; (8000230 <MX_GPIO_Init+0x2c>)
 8000218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800021a:	f003 0301 	and.w	r3, r3, #1
 800021e:	607b      	str	r3, [r7, #4]
 8000220:	687b      	ldr	r3, [r7, #4]

}
 8000222:	bf00      	nop
 8000224:	370c      	adds	r7, #12
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	40021000 	.word	0x40021000

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 f8dd 	bl	80003f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f809 	bl	8000252 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f7ff ffe0 	bl	8000204 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000244:	f001 f8ca 	bl	80013dc <osKernelInitialize>
  MX_FREERTOS_Init();
 8000248:	f7ff ffc2 	bl	80001d0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800024c:	f001 f8ea 	bl	8001424 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000250:	e7fe      	b.n	8000250 <main+0x1c>

08000252 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000252:	b580      	push	{r7, lr}
 8000254:	b096      	sub	sp, #88	; 0x58
 8000256:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000258:	f107 0314 	add.w	r3, r7, #20
 800025c:	2244      	movs	r2, #68	; 0x44
 800025e:	2100      	movs	r1, #0
 8000260:	4618      	mov	r0, r3
 8000262:	f003 fe33 	bl	8003ecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000266:	463b      	mov	r3, r7
 8000268:	2200      	movs	r2, #0
 800026a:	601a      	str	r2, [r3, #0]
 800026c:	605a      	str	r2, [r3, #4]
 800026e:	609a      	str	r2, [r3, #8]
 8000270:	60da      	str	r2, [r3, #12]
 8000272:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000274:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000278:	f000 fa26 	bl	80006c8 <HAL_PWREx_ControlVoltageScaling>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000282:	f000 f82c 	bl	80002de <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000286:	2310      	movs	r3, #16
 8000288:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800028a:	2301      	movs	r3, #1
 800028c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800028e:	2300      	movs	r3, #0
 8000290:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000292:	2360      	movs	r3, #96	; 0x60
 8000294:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000296:	2300      	movs	r3, #0
 8000298:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029a:	f107 0314 	add.w	r3, r7, #20
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 fa68 	bl	8000774 <HAL_RCC_OscConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002aa:	f000 f818 	bl	80002de <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ae:	230f      	movs	r3, #15
 80002b0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002b2:	2300      	movs	r3, #0
 80002b4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c2:	463b      	mov	r3, r7
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 fe68 	bl	8000f9c <HAL_RCC_ClockConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002d2:	f000 f804 	bl	80002de <Error_Handler>
  }
}
 80002d6:	bf00      	nop
 80002d8:	3758      	adds	r7, #88	; 0x58
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}

080002de <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002de:	b480      	push	{r7}
 80002e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002e2:	b672      	cpsid	i
}
 80002e4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002e6:	e7fe      	b.n	80002e6 <Error_Handler+0x8>

080002e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002ee:	4b11      	ldr	r3, [pc, #68]	; (8000334 <HAL_MspInit+0x4c>)
 80002f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002f2:	4a10      	ldr	r2, [pc, #64]	; (8000334 <HAL_MspInit+0x4c>)
 80002f4:	f043 0301 	orr.w	r3, r3, #1
 80002f8:	6613      	str	r3, [r2, #96]	; 0x60
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <HAL_MspInit+0x4c>)
 80002fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002fe:	f003 0301 	and.w	r3, r3, #1
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000306:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <HAL_MspInit+0x4c>)
 8000308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800030a:	4a0a      	ldr	r2, [pc, #40]	; (8000334 <HAL_MspInit+0x4c>)
 800030c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000310:	6593      	str	r3, [r2, #88]	; 0x58
 8000312:	4b08      	ldr	r3, [pc, #32]	; (8000334 <HAL_MspInit+0x4c>)
 8000314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800031a:	603b      	str	r3, [r7, #0]
 800031c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800031e:	2200      	movs	r2, #0
 8000320:	210f      	movs	r1, #15
 8000322:	f06f 0001 	mvn.w	r0, #1
 8000326:	f000 f998 	bl	800065a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800032a:	bf00      	nop
 800032c:	3708      	adds	r7, #8
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40021000 	.word	0x40021000

08000338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800033c:	e7fe      	b.n	800033c <NMI_Handler+0x4>

0800033e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000342:	e7fe      	b.n	8000342 <HardFault_Handler+0x4>

08000344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000348:	e7fe      	b.n	8000348 <MemManage_Handler+0x4>

0800034a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800034a:	b480      	push	{r7}
 800034c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800034e:	e7fe      	b.n	800034e <BusFault_Handler+0x4>

08000350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000354:	e7fe      	b.n	8000354 <UsageFault_Handler+0x4>

08000356 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000356:	b480      	push	{r7}
 8000358:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800035a:	bf00      	nop
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr

08000364 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000368:	f000 f89a 	bl	80004a0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800036c:	f002 fd4a 	bl	8002e04 <xTaskGetSchedulerState>
 8000370:	4603      	mov	r3, r0
 8000372:	2b01      	cmp	r3, #1
 8000374:	d001      	beq.n	800037a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000376:	f003 fb2f 	bl	80039d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
	...

08000380 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <SystemInit+0x20>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800038a:	4a05      	ldr	r2, [pc, #20]	; (80003a0 <SystemInit+0x20>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	e000ed00 	.word	0xe000ed00

080003a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80003a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003a8:	f7ff ffea 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003ac:	480c      	ldr	r0, [pc, #48]	; (80003e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ae:	490d      	ldr	r1, [pc, #52]	; (80003e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b0:	4a0d      	ldr	r2, [pc, #52]	; (80003e8 <LoopForever+0xe>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b4:	e002      	b.n	80003bc <LoopCopyDataInit>

080003b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ba:	3304      	adds	r3, #4

080003bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c0:	d3f9      	bcc.n	80003b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003c2:	4a0a      	ldr	r2, [pc, #40]	; (80003ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80003c4:	4c0a      	ldr	r4, [pc, #40]	; (80003f0 <LoopForever+0x16>)
  movs r3, #0
 80003c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c8:	e001      	b.n	80003ce <LoopFillZerobss>

080003ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003cc:	3204      	adds	r2, #4

080003ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d0:	d3fb      	bcc.n	80003ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003d2:	f003 fdd9 	bl	8003f88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003d6:	f7ff ff2d 	bl	8000234 <main>

080003da <LoopForever>:

LoopForever:
    b LoopForever
 80003da:	e7fe      	b.n	80003da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80003dc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80003e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80003e8:	08004148 	.word	0x08004148
  ldr r2, =_sbss
 80003ec:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80003f0:	20001b64 	.word	0x20001b64

080003f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003f4:	e7fe      	b.n	80003f4 <ADC1_IRQHandler>

080003f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b082      	sub	sp, #8
 80003fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80003fc:	2300      	movs	r3, #0
 80003fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000400:	2003      	movs	r0, #3
 8000402:	f000 f91f 	bl	8000644 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000406:	200f      	movs	r0, #15
 8000408:	f000 f80e 	bl	8000428 <HAL_InitTick>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d002      	beq.n	8000418 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000412:	2301      	movs	r3, #1
 8000414:	71fb      	strb	r3, [r7, #7]
 8000416:	e001      	b.n	800041c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000418:	f7ff ff66 	bl	80002e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800041c:	79fb      	ldrb	r3, [r7, #7]
}
 800041e:	4618      	mov	r0, r3
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
	...

08000428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000430:	2300      	movs	r3, #0
 8000432:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000434:	4b17      	ldr	r3, [pc, #92]	; (8000494 <HAL_InitTick+0x6c>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d023      	beq.n	8000484 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800043c:	4b16      	ldr	r3, [pc, #88]	; (8000498 <HAL_InitTick+0x70>)
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	4b14      	ldr	r3, [pc, #80]	; (8000494 <HAL_InitTick+0x6c>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	4619      	mov	r1, r3
 8000446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800044a:	fbb3 f3f1 	udiv	r3, r3, r1
 800044e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000452:	4618      	mov	r0, r3
 8000454:	f000 f91d 	bl	8000692 <HAL_SYSTICK_Config>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d10f      	bne.n	800047e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	2b0f      	cmp	r3, #15
 8000462:	d809      	bhi.n	8000478 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000464:	2200      	movs	r2, #0
 8000466:	6879      	ldr	r1, [r7, #4]
 8000468:	f04f 30ff 	mov.w	r0, #4294967295
 800046c:	f000 f8f5 	bl	800065a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000470:	4a0a      	ldr	r2, [pc, #40]	; (800049c <HAL_InitTick+0x74>)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	6013      	str	r3, [r2, #0]
 8000476:	e007      	b.n	8000488 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000478:	2301      	movs	r3, #1
 800047a:	73fb      	strb	r3, [r7, #15]
 800047c:	e004      	b.n	8000488 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800047e:	2301      	movs	r3, #1
 8000480:	73fb      	strb	r3, [r7, #15]
 8000482:	e001      	b.n	8000488 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000484:	2301      	movs	r3, #1
 8000486:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000488:	7bfb      	ldrb	r3, [r7, #15]
}
 800048a:	4618      	mov	r0, r3
 800048c:	3710      	adds	r7, #16
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	20000008 	.word	0x20000008
 8000498:	20000000 	.word	0x20000000
 800049c:	20000004 	.word	0x20000004

080004a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <HAL_IncTick+0x20>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	461a      	mov	r2, r3
 80004aa:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <HAL_IncTick+0x24>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4413      	add	r3, r2
 80004b0:	4a04      	ldr	r2, [pc, #16]	; (80004c4 <HAL_IncTick+0x24>)
 80004b2:	6013      	str	r3, [r2, #0]
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	20000008 	.word	0x20000008
 80004c4:	20000080 	.word	0x20000080

080004c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  return uwTick;
 80004cc:	4b03      	ldr	r3, [pc, #12]	; (80004dc <HAL_GetTick+0x14>)
 80004ce:	681b      	ldr	r3, [r3, #0]
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	20000080 	.word	0x20000080

080004e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	f003 0307 	and.w	r3, r3, #7
 80004ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <__NVIC_SetPriorityGrouping+0x44>)
 80004f2:	68db      	ldr	r3, [r3, #12]
 80004f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004f6:	68ba      	ldr	r2, [r7, #8]
 80004f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80004fc:	4013      	ands	r3, r2
 80004fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000508:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800050c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000512:	4a04      	ldr	r2, [pc, #16]	; (8000524 <__NVIC_SetPriorityGrouping+0x44>)
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	60d3      	str	r3, [r2, #12]
}
 8000518:	bf00      	nop
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	e000ed00 	.word	0xe000ed00

08000528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800052c:	4b04      	ldr	r3, [pc, #16]	; (8000540 <__NVIC_GetPriorityGrouping+0x18>)
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	0a1b      	lsrs	r3, r3, #8
 8000532:	f003 0307 	and.w	r3, r3, #7
}
 8000536:	4618      	mov	r0, r3
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	e000ed00 	.word	0xe000ed00

08000544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	6039      	str	r1, [r7, #0]
 800054e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000554:	2b00      	cmp	r3, #0
 8000556:	db0a      	blt.n	800056e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	b2da      	uxtb	r2, r3
 800055c:	490c      	ldr	r1, [pc, #48]	; (8000590 <__NVIC_SetPriority+0x4c>)
 800055e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000562:	0112      	lsls	r2, r2, #4
 8000564:	b2d2      	uxtb	r2, r2
 8000566:	440b      	add	r3, r1
 8000568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800056c:	e00a      	b.n	8000584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	b2da      	uxtb	r2, r3
 8000572:	4908      	ldr	r1, [pc, #32]	; (8000594 <__NVIC_SetPriority+0x50>)
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	f003 030f 	and.w	r3, r3, #15
 800057a:	3b04      	subs	r3, #4
 800057c:	0112      	lsls	r2, r2, #4
 800057e:	b2d2      	uxtb	r2, r2
 8000580:	440b      	add	r3, r1
 8000582:	761a      	strb	r2, [r3, #24]
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	e000e100 	.word	0xe000e100
 8000594:	e000ed00 	.word	0xe000ed00

08000598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000598:	b480      	push	{r7}
 800059a:	b089      	sub	sp, #36	; 0x24
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	f003 0307 	and.w	r3, r3, #7
 80005aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ac:	69fb      	ldr	r3, [r7, #28]
 80005ae:	f1c3 0307 	rsb	r3, r3, #7
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	bf28      	it	cs
 80005b6:	2304      	movcs	r3, #4
 80005b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ba:	69fb      	ldr	r3, [r7, #28]
 80005bc:	3304      	adds	r3, #4
 80005be:	2b06      	cmp	r3, #6
 80005c0:	d902      	bls.n	80005c8 <NVIC_EncodePriority+0x30>
 80005c2:	69fb      	ldr	r3, [r7, #28]
 80005c4:	3b03      	subs	r3, #3
 80005c6:	e000      	b.n	80005ca <NVIC_EncodePriority+0x32>
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005cc:	f04f 32ff 	mov.w	r2, #4294967295
 80005d0:	69bb      	ldr	r3, [r7, #24]
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	43da      	mvns	r2, r3
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	401a      	ands	r2, r3
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005e0:	f04f 31ff 	mov.w	r1, #4294967295
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ea:	43d9      	mvns	r1, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f0:	4313      	orrs	r3, r2
         );
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3724      	adds	r7, #36	; 0x24
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
	...

08000600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3b01      	subs	r3, #1
 800060c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000610:	d301      	bcc.n	8000616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000612:	2301      	movs	r3, #1
 8000614:	e00f      	b.n	8000636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <SysTick_Config+0x40>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061e:	210f      	movs	r1, #15
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f7ff ff8e 	bl	8000544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <SysTick_Config+0x40>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <SysTick_Config+0x40>)
 8000630:	2207      	movs	r2, #7
 8000632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e000e010 	.word	0xe000e010

08000644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f7ff ff47 	bl	80004e0 <__NVIC_SetPriorityGrouping>
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	b086      	sub	sp, #24
 800065e:	af00      	add	r7, sp, #0
 8000660:	4603      	mov	r3, r0
 8000662:	60b9      	str	r1, [r7, #8]
 8000664:	607a      	str	r2, [r7, #4]
 8000666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800066c:	f7ff ff5c 	bl	8000528 <__NVIC_GetPriorityGrouping>
 8000670:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	68b9      	ldr	r1, [r7, #8]
 8000676:	6978      	ldr	r0, [r7, #20]
 8000678:	f7ff ff8e 	bl	8000598 <NVIC_EncodePriority>
 800067c:	4602      	mov	r2, r0
 800067e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000682:	4611      	mov	r1, r2
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff ff5d 	bl	8000544 <__NVIC_SetPriority>
}
 800068a:	bf00      	nop
 800068c:	3718      	adds	r7, #24
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f7ff ffb0 	bl	8000600 <SysTick_Config>
 80006a0:	4603      	mov	r3, r0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	40007000 	.word	0x40007000

080006c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006d6:	d130      	bne.n	800073a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80006d8:	4b23      	ldr	r3, [pc, #140]	; (8000768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80006e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006e4:	d038      	beq.n	8000758 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e6:	4b20      	ldr	r3, [pc, #128]	; (8000768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80006ee:	4a1e      	ldr	r2, [pc, #120]	; (8000768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80006f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80006f6:	4b1d      	ldr	r3, [pc, #116]	; (800076c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2232      	movs	r2, #50	; 0x32
 80006fc:	fb02 f303 	mul.w	r3, r2, r3
 8000700:	4a1b      	ldr	r2, [pc, #108]	; (8000770 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000702:	fba2 2303 	umull	r2, r3, r2, r3
 8000706:	0c9b      	lsrs	r3, r3, #18
 8000708:	3301      	adds	r3, #1
 800070a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800070c:	e002      	b.n	8000714 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	3b01      	subs	r3, #1
 8000712:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000716:	695b      	ldr	r3, [r3, #20]
 8000718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800071c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000720:	d102      	bne.n	8000728 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d1f2      	bne.n	800070e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800072a:	695b      	ldr	r3, [r3, #20]
 800072c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000734:	d110      	bne.n	8000758 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000736:	2303      	movs	r3, #3
 8000738:	e00f      	b.n	800075a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000746:	d007      	beq.n	8000758 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000750:	4a05      	ldr	r2, [pc, #20]	; (8000768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000752:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000756:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000758:	2300      	movs	r3, #0
}
 800075a:	4618      	mov	r0, r3
 800075c:	3714      	adds	r7, #20
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	40007000 	.word	0x40007000
 800076c:	20000000 	.word	0x20000000
 8000770:	431bde83 	.word	0x431bde83

08000774 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d102      	bne.n	8000788 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000782:	2301      	movs	r3, #1
 8000784:	f000 bc02 	b.w	8000f8c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000788:	4b96      	ldr	r3, [pc, #600]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	f003 030c 	and.w	r3, r3, #12
 8000790:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000792:	4b94      	ldr	r3, [pc, #592]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 8000794:	68db      	ldr	r3, [r3, #12]
 8000796:	f003 0303 	and.w	r3, r3, #3
 800079a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f003 0310 	and.w	r3, r3, #16
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	f000 80e4 	beq.w	8000972 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80007aa:	69bb      	ldr	r3, [r7, #24]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d007      	beq.n	80007c0 <HAL_RCC_OscConfig+0x4c>
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	2b0c      	cmp	r3, #12
 80007b4:	f040 808b 	bne.w	80008ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	f040 8087 	bne.w	80008ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80007c0:	4b88      	ldr	r3, [pc, #544]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f003 0302 	and.w	r3, r3, #2
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d005      	beq.n	80007d8 <HAL_RCC_OscConfig+0x64>
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d101      	bne.n	80007d8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80007d4:	2301      	movs	r3, #1
 80007d6:	e3d9      	b.n	8000f8c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	6a1a      	ldr	r2, [r3, #32]
 80007dc:	4b81      	ldr	r3, [pc, #516]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f003 0308 	and.w	r3, r3, #8
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d004      	beq.n	80007f2 <HAL_RCC_OscConfig+0x7e>
 80007e8:	4b7e      	ldr	r3, [pc, #504]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80007f0:	e005      	b.n	80007fe <HAL_RCC_OscConfig+0x8a>
 80007f2:	4b7c      	ldr	r3, [pc, #496]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 80007f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80007f8:	091b      	lsrs	r3, r3, #4
 80007fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80007fe:	4293      	cmp	r3, r2
 8000800:	d223      	bcs.n	800084a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6a1b      	ldr	r3, [r3, #32]
 8000806:	4618      	mov	r0, r3
 8000808:	f000 fd54 	bl	80012b4 <RCC_SetFlashLatencyFromMSIRange>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
 8000814:	e3ba      	b.n	8000f8c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000816:	4b73      	ldr	r3, [pc, #460]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a72      	ldr	r2, [pc, #456]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 800081c:	f043 0308 	orr.w	r3, r3, #8
 8000820:	6013      	str	r3, [r2, #0]
 8000822:	4b70      	ldr	r3, [pc, #448]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6a1b      	ldr	r3, [r3, #32]
 800082e:	496d      	ldr	r1, [pc, #436]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 8000830:	4313      	orrs	r3, r2
 8000832:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000834:	4b6b      	ldr	r3, [pc, #428]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	69db      	ldr	r3, [r3, #28]
 8000840:	021b      	lsls	r3, r3, #8
 8000842:	4968      	ldr	r1, [pc, #416]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 8000844:	4313      	orrs	r3, r2
 8000846:	604b      	str	r3, [r1, #4]
 8000848:	e025      	b.n	8000896 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800084a:	4b66      	ldr	r3, [pc, #408]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a65      	ldr	r2, [pc, #404]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 8000850:	f043 0308 	orr.w	r3, r3, #8
 8000854:	6013      	str	r3, [r2, #0]
 8000856:	4b63      	ldr	r3, [pc, #396]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	6a1b      	ldr	r3, [r3, #32]
 8000862:	4960      	ldr	r1, [pc, #384]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 8000864:	4313      	orrs	r3, r2
 8000866:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000868:	4b5e      	ldr	r3, [pc, #376]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	69db      	ldr	r3, [r3, #28]
 8000874:	021b      	lsls	r3, r3, #8
 8000876:	495b      	ldr	r1, [pc, #364]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 8000878:	4313      	orrs	r3, r2
 800087a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800087c:	69bb      	ldr	r3, [r7, #24]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d109      	bne.n	8000896 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6a1b      	ldr	r3, [r3, #32]
 8000886:	4618      	mov	r0, r3
 8000888:	f000 fd14 	bl	80012b4 <RCC_SetFlashLatencyFromMSIRange>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000892:	2301      	movs	r3, #1
 8000894:	e37a      	b.n	8000f8c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000896:	f000 fc81 	bl	800119c <HAL_RCC_GetSysClockFreq>
 800089a:	4602      	mov	r2, r0
 800089c:	4b51      	ldr	r3, [pc, #324]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	091b      	lsrs	r3, r3, #4
 80008a2:	f003 030f 	and.w	r3, r3, #15
 80008a6:	4950      	ldr	r1, [pc, #320]	; (80009e8 <HAL_RCC_OscConfig+0x274>)
 80008a8:	5ccb      	ldrb	r3, [r1, r3]
 80008aa:	f003 031f 	and.w	r3, r3, #31
 80008ae:	fa22 f303 	lsr.w	r3, r2, r3
 80008b2:	4a4e      	ldr	r2, [pc, #312]	; (80009ec <HAL_RCC_OscConfig+0x278>)
 80008b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80008b6:	4b4e      	ldr	r3, [pc, #312]	; (80009f0 <HAL_RCC_OscConfig+0x27c>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff fdb4 	bl	8000428 <HAL_InitTick>
 80008c0:	4603      	mov	r3, r0
 80008c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d052      	beq.n	8000970 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
 80008cc:	e35e      	b.n	8000f8c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d032      	beq.n	800093c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80008d6:	4b43      	ldr	r3, [pc, #268]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a42      	ldr	r2, [pc, #264]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80008e2:	f7ff fdf1 	bl	80004c8 <HAL_GetTick>
 80008e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80008e8:	e008      	b.n	80008fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80008ea:	f7ff fded 	bl	80004c8 <HAL_GetTick>
 80008ee:	4602      	mov	r2, r0
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	1ad3      	subs	r3, r2, r3
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d901      	bls.n	80008fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80008f8:	2303      	movs	r3, #3
 80008fa:	e347      	b.n	8000f8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80008fc:	4b39      	ldr	r3, [pc, #228]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f003 0302 	and.w	r3, r3, #2
 8000904:	2b00      	cmp	r3, #0
 8000906:	d0f0      	beq.n	80008ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000908:	4b36      	ldr	r3, [pc, #216]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a35      	ldr	r2, [pc, #212]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 800090e:	f043 0308 	orr.w	r3, r3, #8
 8000912:	6013      	str	r3, [r2, #0]
 8000914:	4b33      	ldr	r3, [pc, #204]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6a1b      	ldr	r3, [r3, #32]
 8000920:	4930      	ldr	r1, [pc, #192]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 8000922:	4313      	orrs	r3, r2
 8000924:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000926:	4b2f      	ldr	r3, [pc, #188]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	021b      	lsls	r3, r3, #8
 8000934:	492b      	ldr	r1, [pc, #172]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 8000936:	4313      	orrs	r3, r2
 8000938:	604b      	str	r3, [r1, #4]
 800093a:	e01a      	b.n	8000972 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800093c:	4b29      	ldr	r3, [pc, #164]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a28      	ldr	r2, [pc, #160]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 8000942:	f023 0301 	bic.w	r3, r3, #1
 8000946:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000948:	f7ff fdbe 	bl	80004c8 <HAL_GetTick>
 800094c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800094e:	e008      	b.n	8000962 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000950:	f7ff fdba 	bl	80004c8 <HAL_GetTick>
 8000954:	4602      	mov	r2, r0
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	2b02      	cmp	r3, #2
 800095c:	d901      	bls.n	8000962 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800095e:	2303      	movs	r3, #3
 8000960:	e314      	b.n	8000f8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000962:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	2b00      	cmp	r3, #0
 800096c:	d1f0      	bne.n	8000950 <HAL_RCC_OscConfig+0x1dc>
 800096e:	e000      	b.n	8000972 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000970:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	2b00      	cmp	r3, #0
 800097c:	d073      	beq.n	8000a66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800097e:	69bb      	ldr	r3, [r7, #24]
 8000980:	2b08      	cmp	r3, #8
 8000982:	d005      	beq.n	8000990 <HAL_RCC_OscConfig+0x21c>
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	2b0c      	cmp	r3, #12
 8000988:	d10e      	bne.n	80009a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	2b03      	cmp	r3, #3
 800098e:	d10b      	bne.n	80009a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000998:	2b00      	cmp	r3, #0
 800099a:	d063      	beq.n	8000a64 <HAL_RCC_OscConfig+0x2f0>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d15f      	bne.n	8000a64 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80009a4:	2301      	movs	r3, #1
 80009a6:	e2f1      	b.n	8000f8c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009b0:	d106      	bne.n	80009c0 <HAL_RCC_OscConfig+0x24c>
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a0b      	ldr	r2, [pc, #44]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 80009b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009bc:	6013      	str	r3, [r2, #0]
 80009be:	e025      	b.n	8000a0c <HAL_RCC_OscConfig+0x298>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009c8:	d114      	bne.n	80009f4 <HAL_RCC_OscConfig+0x280>
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 80009d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009d4:	6013      	str	r3, [r2, #0]
 80009d6:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a02      	ldr	r2, [pc, #8]	; (80009e4 <HAL_RCC_OscConfig+0x270>)
 80009dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009e0:	6013      	str	r3, [r2, #0]
 80009e2:	e013      	b.n	8000a0c <HAL_RCC_OscConfig+0x298>
 80009e4:	40021000 	.word	0x40021000
 80009e8:	08004100 	.word	0x08004100
 80009ec:	20000000 	.word	0x20000000
 80009f0:	20000004 	.word	0x20000004
 80009f4:	4ba0      	ldr	r3, [pc, #640]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a9f      	ldr	r2, [pc, #636]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 80009fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009fe:	6013      	str	r3, [r2, #0]
 8000a00:	4b9d      	ldr	r3, [pc, #628]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a9c      	ldr	r2, [pc, #624]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d013      	beq.n	8000a3c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a14:	f7ff fd58 	bl	80004c8 <HAL_GetTick>
 8000a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000a1a:	e008      	b.n	8000a2e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a1c:	f7ff fd54 	bl	80004c8 <HAL_GetTick>
 8000a20:	4602      	mov	r2, r0
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	2b64      	cmp	r3, #100	; 0x64
 8000a28:	d901      	bls.n	8000a2e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	e2ae      	b.n	8000f8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000a2e:	4b92      	ldr	r3, [pc, #584]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d0f0      	beq.n	8000a1c <HAL_RCC_OscConfig+0x2a8>
 8000a3a:	e014      	b.n	8000a66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a3c:	f7ff fd44 	bl	80004c8 <HAL_GetTick>
 8000a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000a42:	e008      	b.n	8000a56 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a44:	f7ff fd40 	bl	80004c8 <HAL_GetTick>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	2b64      	cmp	r3, #100	; 0x64
 8000a50:	d901      	bls.n	8000a56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000a52:	2303      	movs	r3, #3
 8000a54:	e29a      	b.n	8000f8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000a56:	4b88      	ldr	r3, [pc, #544]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d1f0      	bne.n	8000a44 <HAL_RCC_OscConfig+0x2d0>
 8000a62:	e000      	b.n	8000a66 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d060      	beq.n	8000b34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	d005      	beq.n	8000a84 <HAL_RCC_OscConfig+0x310>
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	2b0c      	cmp	r3, #12
 8000a7c:	d119      	bne.n	8000ab2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	2b02      	cmp	r3, #2
 8000a82:	d116      	bne.n	8000ab2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000a84:	4b7c      	ldr	r3, [pc, #496]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d005      	beq.n	8000a9c <HAL_RCC_OscConfig+0x328>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d101      	bne.n	8000a9c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	e277      	b.n	8000f8c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a9c:	4b76      	ldr	r3, [pc, #472]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	691b      	ldr	r3, [r3, #16]
 8000aa8:	061b      	lsls	r3, r3, #24
 8000aaa:	4973      	ldr	r1, [pc, #460]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000aac:	4313      	orrs	r3, r2
 8000aae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ab0:	e040      	b.n	8000b34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d023      	beq.n	8000b02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000aba:	4b6f      	ldr	r3, [pc, #444]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a6e      	ldr	r2, [pc, #440]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ac6:	f7ff fcff 	bl	80004c8 <HAL_GetTick>
 8000aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000acc:	e008      	b.n	8000ae0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ace:	f7ff fcfb 	bl	80004c8 <HAL_GetTick>
 8000ad2:	4602      	mov	r2, r0
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d901      	bls.n	8000ae0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000adc:	2303      	movs	r3, #3
 8000ade:	e255      	b.n	8000f8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ae0:	4b65      	ldr	r3, [pc, #404]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d0f0      	beq.n	8000ace <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000aec:	4b62      	ldr	r3, [pc, #392]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	691b      	ldr	r3, [r3, #16]
 8000af8:	061b      	lsls	r3, r3, #24
 8000afa:	495f      	ldr	r1, [pc, #380]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000afc:	4313      	orrs	r3, r2
 8000afe:	604b      	str	r3, [r1, #4]
 8000b00:	e018      	b.n	8000b34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b02:	4b5d      	ldr	r3, [pc, #372]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a5c      	ldr	r2, [pc, #368]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000b08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b0e:	f7ff fcdb 	bl	80004c8 <HAL_GetTick>
 8000b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000b14:	e008      	b.n	8000b28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b16:	f7ff fcd7 	bl	80004c8 <HAL_GetTick>
 8000b1a:	4602      	mov	r2, r0
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d901      	bls.n	8000b28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000b24:	2303      	movs	r3, #3
 8000b26:	e231      	b.n	8000f8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000b28:	4b53      	ldr	r3, [pc, #332]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d1f0      	bne.n	8000b16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f003 0308 	and.w	r3, r3, #8
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d03c      	beq.n	8000bba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	695b      	ldr	r3, [r3, #20]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d01c      	beq.n	8000b82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b48:	4b4b      	ldr	r3, [pc, #300]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b4e:	4a4a      	ldr	r2, [pc, #296]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b58:	f7ff fcb6 	bl	80004c8 <HAL_GetTick>
 8000b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000b5e:	e008      	b.n	8000b72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b60:	f7ff fcb2 	bl	80004c8 <HAL_GetTick>
 8000b64:	4602      	mov	r2, r0
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d901      	bls.n	8000b72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	e20c      	b.n	8000f8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000b72:	4b41      	ldr	r3, [pc, #260]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b78:	f003 0302 	and.w	r3, r3, #2
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d0ef      	beq.n	8000b60 <HAL_RCC_OscConfig+0x3ec>
 8000b80:	e01b      	b.n	8000bba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000b82:	4b3d      	ldr	r3, [pc, #244]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b88:	4a3b      	ldr	r2, [pc, #236]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000b8a:	f023 0301 	bic.w	r3, r3, #1
 8000b8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b92:	f7ff fc99 	bl	80004c8 <HAL_GetTick>
 8000b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000b98:	e008      	b.n	8000bac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000b9a:	f7ff fc95 	bl	80004c8 <HAL_GetTick>
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	1ad3      	subs	r3, r2, r3
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d901      	bls.n	8000bac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	e1ef      	b.n	8000f8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000bac:	4b32      	ldr	r3, [pc, #200]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d1ef      	bne.n	8000b9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f000 80a6 	beq.w	8000d14 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000bcc:	4b2a      	ldr	r3, [pc, #168]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d10d      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000bd8:	4b27      	ldr	r3, [pc, #156]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bdc:	4a26      	ldr	r2, [pc, #152]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be2:	6593      	str	r3, [r2, #88]	; 0x58
 8000be4:	4b24      	ldr	r3, [pc, #144]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000bf4:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <HAL_RCC_OscConfig+0x508>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d118      	bne.n	8000c32 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000c00:	4b1e      	ldr	r3, [pc, #120]	; (8000c7c <HAL_RCC_OscConfig+0x508>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a1d      	ldr	r2, [pc, #116]	; (8000c7c <HAL_RCC_OscConfig+0x508>)
 8000c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c0c:	f7ff fc5c 	bl	80004c8 <HAL_GetTick>
 8000c10:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c12:	e008      	b.n	8000c26 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c14:	f7ff fc58 	bl	80004c8 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d901      	bls.n	8000c26 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000c22:	2303      	movs	r3, #3
 8000c24:	e1b2      	b.n	8000f8c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <HAL_RCC_OscConfig+0x508>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d0f0      	beq.n	8000c14 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d108      	bne.n	8000c4c <HAL_RCC_OscConfig+0x4d8>
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c40:	4a0d      	ldr	r2, [pc, #52]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000c4a:	e029      	b.n	8000ca0 <HAL_RCC_OscConfig+0x52c>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	2b05      	cmp	r3, #5
 8000c52:	d115      	bne.n	8000c80 <HAL_RCC_OscConfig+0x50c>
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c5a:	4a07      	ldr	r2, [pc, #28]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c6a:	4a03      	ldr	r2, [pc, #12]	; (8000c78 <HAL_RCC_OscConfig+0x504>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000c74:	e014      	b.n	8000ca0 <HAL_RCC_OscConfig+0x52c>
 8000c76:	bf00      	nop
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40007000 	.word	0x40007000
 8000c80:	4b9a      	ldr	r3, [pc, #616]	; (8000eec <HAL_RCC_OscConfig+0x778>)
 8000c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c86:	4a99      	ldr	r2, [pc, #612]	; (8000eec <HAL_RCC_OscConfig+0x778>)
 8000c88:	f023 0301 	bic.w	r3, r3, #1
 8000c8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000c90:	4b96      	ldr	r3, [pc, #600]	; (8000eec <HAL_RCC_OscConfig+0x778>)
 8000c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c96:	4a95      	ldr	r2, [pc, #596]	; (8000eec <HAL_RCC_OscConfig+0x778>)
 8000c98:	f023 0304 	bic.w	r3, r3, #4
 8000c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d016      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ca8:	f7ff fc0e 	bl	80004c8 <HAL_GetTick>
 8000cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000cae:	e00a      	b.n	8000cc6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cb0:	f7ff fc0a 	bl	80004c8 <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d901      	bls.n	8000cc6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	e162      	b.n	8000f8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000cc6:	4b89      	ldr	r3, [pc, #548]	; (8000eec <HAL_RCC_OscConfig+0x778>)
 8000cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ccc:	f003 0302 	and.w	r3, r3, #2
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d0ed      	beq.n	8000cb0 <HAL_RCC_OscConfig+0x53c>
 8000cd4:	e015      	b.n	8000d02 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cd6:	f7ff fbf7 	bl	80004c8 <HAL_GetTick>
 8000cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000cdc:	e00a      	b.n	8000cf4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cde:	f7ff fbf3 	bl	80004c8 <HAL_GetTick>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d901      	bls.n	8000cf4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	e14b      	b.n	8000f8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000cf4:	4b7d      	ldr	r3, [pc, #500]	; (8000eec <HAL_RCC_OscConfig+0x778>)
 8000cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1ed      	bne.n	8000cde <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000d02:	7ffb      	ldrb	r3, [r7, #31]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d105      	bne.n	8000d14 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d08:	4b78      	ldr	r3, [pc, #480]	; (8000eec <HAL_RCC_OscConfig+0x778>)
 8000d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0c:	4a77      	ldr	r2, [pc, #476]	; (8000eec <HAL_RCC_OscConfig+0x778>)
 8000d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d12:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f003 0320 	and.w	r3, r3, #32
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d03c      	beq.n	8000d9a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d01c      	beq.n	8000d62 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000d28:	4b70      	ldr	r3, [pc, #448]	; (8000eec <HAL_RCC_OscConfig+0x778>)
 8000d2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d2e:	4a6f      	ldr	r2, [pc, #444]	; (8000eec <HAL_RCC_OscConfig+0x778>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d38:	f7ff fbc6 	bl	80004c8 <HAL_GetTick>
 8000d3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000d3e:	e008      	b.n	8000d52 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d40:	f7ff fbc2 	bl	80004c8 <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d901      	bls.n	8000d52 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e11c      	b.n	8000f8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000d52:	4b66      	ldr	r3, [pc, #408]	; (8000eec <HAL_RCC_OscConfig+0x778>)
 8000d54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d58:	f003 0302 	and.w	r3, r3, #2
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d0ef      	beq.n	8000d40 <HAL_RCC_OscConfig+0x5cc>
 8000d60:	e01b      	b.n	8000d9a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000d62:	4b62      	ldr	r3, [pc, #392]	; (8000eec <HAL_RCC_OscConfig+0x778>)
 8000d64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d68:	4a60      	ldr	r2, [pc, #384]	; (8000eec <HAL_RCC_OscConfig+0x778>)
 8000d6a:	f023 0301 	bic.w	r3, r3, #1
 8000d6e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d72:	f7ff fba9 	bl	80004c8 <HAL_GetTick>
 8000d76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000d78:	e008      	b.n	8000d8c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d7a:	f7ff fba5 	bl	80004c8 <HAL_GetTick>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	1ad3      	subs	r3, r2, r3
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d901      	bls.n	8000d8c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8000d88:	2303      	movs	r3, #3
 8000d8a:	e0ff      	b.n	8000f8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000d8c:	4b57      	ldr	r3, [pc, #348]	; (8000eec <HAL_RCC_OscConfig+0x778>)
 8000d8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1ef      	bne.n	8000d7a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f000 80f3 	beq.w	8000f8a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	f040 80c9 	bne.w	8000f40 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8000dae:	4b4f      	ldr	r3, [pc, #316]	; (8000eec <HAL_RCC_OscConfig+0x778>)
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	f003 0203 	and.w	r2, r3, #3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d12c      	bne.n	8000e1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d123      	bne.n	8000e1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dde:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d11b      	bne.n	8000e1c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d113      	bne.n	8000e1c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dfe:	085b      	lsrs	r3, r3, #1
 8000e00:	3b01      	subs	r3, #1
 8000e02:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d109      	bne.n	8000e1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	085b      	lsrs	r3, r3, #1
 8000e14:	3b01      	subs	r3, #1
 8000e16:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d06b      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	2b0c      	cmp	r3, #12
 8000e20:	d062      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8000e22:	4b32      	ldr	r3, [pc, #200]	; (8000eec <HAL_RCC_OscConfig+0x778>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e0ac      	b.n	8000f8c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8000e32:	4b2e      	ldr	r3, [pc, #184]	; (8000eec <HAL_RCC_OscConfig+0x778>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a2d      	ldr	r2, [pc, #180]	; (8000eec <HAL_RCC_OscConfig+0x778>)
 8000e38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e3c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000e3e:	f7ff fb43 	bl	80004c8 <HAL_GetTick>
 8000e42:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e44:	e008      	b.n	8000e58 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e46:	f7ff fb3f 	bl	80004c8 <HAL_GetTick>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d901      	bls.n	8000e58 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8000e54:	2303      	movs	r3, #3
 8000e56:	e099      	b.n	8000f8c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e58:	4b24      	ldr	r3, [pc, #144]	; (8000eec <HAL_RCC_OscConfig+0x778>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1f0      	bne.n	8000e46 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e64:	4b21      	ldr	r3, [pc, #132]	; (8000eec <HAL_RCC_OscConfig+0x778>)
 8000e66:	68da      	ldr	r2, [r3, #12]
 8000e68:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <HAL_RCC_OscConfig+0x77c>)
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000e74:	3a01      	subs	r2, #1
 8000e76:	0112      	lsls	r2, r2, #4
 8000e78:	4311      	orrs	r1, r2
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000e7e:	0212      	lsls	r2, r2, #8
 8000e80:	4311      	orrs	r1, r2
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000e86:	0852      	lsrs	r2, r2, #1
 8000e88:	3a01      	subs	r2, #1
 8000e8a:	0552      	lsls	r2, r2, #21
 8000e8c:	4311      	orrs	r1, r2
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000e92:	0852      	lsrs	r2, r2, #1
 8000e94:	3a01      	subs	r2, #1
 8000e96:	0652      	lsls	r2, r2, #25
 8000e98:	4311      	orrs	r1, r2
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000e9e:	06d2      	lsls	r2, r2, #27
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	4912      	ldr	r1, [pc, #72]	; (8000eec <HAL_RCC_OscConfig+0x778>)
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8000ea8:	4b10      	ldr	r3, [pc, #64]	; (8000eec <HAL_RCC_OscConfig+0x778>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0f      	ldr	r2, [pc, #60]	; (8000eec <HAL_RCC_OscConfig+0x778>)
 8000eae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000eb2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <HAL_RCC_OscConfig+0x778>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	4a0c      	ldr	r2, [pc, #48]	; (8000eec <HAL_RCC_OscConfig+0x778>)
 8000eba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ebe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000ec0:	f7ff fb02 	bl	80004c8 <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ec8:	f7ff fafe 	bl	80004c8 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e058      	b.n	8000f8c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000eda:	4b04      	ldr	r3, [pc, #16]	; (8000eec <HAL_RCC_OscConfig+0x778>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0f0      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000ee6:	e050      	b.n	8000f8a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e04f      	b.n	8000f8c <HAL_RCC_OscConfig+0x818>
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000ef4:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <HAL_RCC_OscConfig+0x820>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d144      	bne.n	8000f8a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8000f00:	4b24      	ldr	r3, [pc, #144]	; (8000f94 <HAL_RCC_OscConfig+0x820>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a23      	ldr	r2, [pc, #140]	; (8000f94 <HAL_RCC_OscConfig+0x820>)
 8000f06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000f0c:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <HAL_RCC_OscConfig+0x820>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	4a20      	ldr	r2, [pc, #128]	; (8000f94 <HAL_RCC_OscConfig+0x820>)
 8000f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8000f18:	f7ff fad6 	bl	80004c8 <HAL_GetTick>
 8000f1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f1e:	e008      	b.n	8000f32 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f20:	f7ff fad2 	bl	80004c8 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d901      	bls.n	8000f32 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e02c      	b.n	8000f8c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <HAL_RCC_OscConfig+0x820>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d0f0      	beq.n	8000f20 <HAL_RCC_OscConfig+0x7ac>
 8000f3e:	e024      	b.n	8000f8a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	2b0c      	cmp	r3, #12
 8000f44:	d01f      	beq.n	8000f86 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <HAL_RCC_OscConfig+0x820>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a12      	ldr	r2, [pc, #72]	; (8000f94 <HAL_RCC_OscConfig+0x820>)
 8000f4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f52:	f7ff fab9 	bl	80004c8 <HAL_GetTick>
 8000f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f58:	e008      	b.n	8000f6c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f5a:	f7ff fab5 	bl	80004c8 <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d901      	bls.n	8000f6c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e00f      	b.n	8000f8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <HAL_RCC_OscConfig+0x820>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1f0      	bne.n	8000f5a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_RCC_OscConfig+0x820>)
 8000f7a:	68da      	ldr	r2, [r3, #12]
 8000f7c:	4905      	ldr	r1, [pc, #20]	; (8000f94 <HAL_RCC_OscConfig+0x820>)
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_RCC_OscConfig+0x824>)
 8000f80:	4013      	ands	r3, r2
 8000f82:	60cb      	str	r3, [r1, #12]
 8000f84:	e001      	b.n	8000f8a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e000      	b.n	8000f8c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3720      	adds	r7, #32
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40021000 	.word	0x40021000
 8000f98:	feeefffc 	.word	0xfeeefffc

08000f9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d101      	bne.n	8000fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e0e7      	b.n	8001180 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fb0:	4b75      	ldr	r3, [pc, #468]	; (8001188 <HAL_RCC_ClockConfig+0x1ec>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0307 	and.w	r3, r3, #7
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d910      	bls.n	8000fe0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fbe:	4b72      	ldr	r3, [pc, #456]	; (8001188 <HAL_RCC_ClockConfig+0x1ec>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f023 0207 	bic.w	r2, r3, #7
 8000fc6:	4970      	ldr	r1, [pc, #448]	; (8001188 <HAL_RCC_ClockConfig+0x1ec>)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fce:	4b6e      	ldr	r3, [pc, #440]	; (8001188 <HAL_RCC_ClockConfig+0x1ec>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d001      	beq.n	8000fe0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e0cf      	b.n	8001180 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d010      	beq.n	800100e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	4b66      	ldr	r3, [pc, #408]	; (800118c <HAL_RCC_ClockConfig+0x1f0>)
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d908      	bls.n	800100e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ffc:	4b63      	ldr	r3, [pc, #396]	; (800118c <HAL_RCC_ClockConfig+0x1f0>)
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	4960      	ldr	r1, [pc, #384]	; (800118c <HAL_RCC_ClockConfig+0x1f0>)
 800100a:	4313      	orrs	r3, r2
 800100c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	2b00      	cmp	r3, #0
 8001018:	d04c      	beq.n	80010b4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2b03      	cmp	r3, #3
 8001020:	d107      	bne.n	8001032 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001022:	4b5a      	ldr	r3, [pc, #360]	; (800118c <HAL_RCC_ClockConfig+0x1f0>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d121      	bne.n	8001072 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e0a6      	b.n	8001180 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2b02      	cmp	r3, #2
 8001038:	d107      	bne.n	800104a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800103a:	4b54      	ldr	r3, [pc, #336]	; (800118c <HAL_RCC_ClockConfig+0x1f0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d115      	bne.n	8001072 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e09a      	b.n	8001180 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d107      	bne.n	8001062 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001052:	4b4e      	ldr	r3, [pc, #312]	; (800118c <HAL_RCC_ClockConfig+0x1f0>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d109      	bne.n	8001072 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e08e      	b.n	8001180 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001062:	4b4a      	ldr	r3, [pc, #296]	; (800118c <HAL_RCC_ClockConfig+0x1f0>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e086      	b.n	8001180 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001072:	4b46      	ldr	r3, [pc, #280]	; (800118c <HAL_RCC_ClockConfig+0x1f0>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f023 0203 	bic.w	r2, r3, #3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	4943      	ldr	r1, [pc, #268]	; (800118c <HAL_RCC_ClockConfig+0x1f0>)
 8001080:	4313      	orrs	r3, r2
 8001082:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001084:	f7ff fa20 	bl	80004c8 <HAL_GetTick>
 8001088:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800108a:	e00a      	b.n	80010a2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800108c:	f7ff fa1c 	bl	80004c8 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	f241 3288 	movw	r2, #5000	; 0x1388
 800109a:	4293      	cmp	r3, r2
 800109c:	d901      	bls.n	80010a2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e06e      	b.n	8001180 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010a2:	4b3a      	ldr	r3, [pc, #232]	; (800118c <HAL_RCC_ClockConfig+0x1f0>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f003 020c 	and.w	r2, r3, #12
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d1eb      	bne.n	800108c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d010      	beq.n	80010e2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	4b31      	ldr	r3, [pc, #196]	; (800118c <HAL_RCC_ClockConfig+0x1f0>)
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d208      	bcs.n	80010e2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010d0:	4b2e      	ldr	r3, [pc, #184]	; (800118c <HAL_RCC_ClockConfig+0x1f0>)
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	492b      	ldr	r1, [pc, #172]	; (800118c <HAL_RCC_ClockConfig+0x1f0>)
 80010de:	4313      	orrs	r3, r2
 80010e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010e2:	4b29      	ldr	r3, [pc, #164]	; (8001188 <HAL_RCC_ClockConfig+0x1ec>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0307 	and.w	r3, r3, #7
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d210      	bcs.n	8001112 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010f0:	4b25      	ldr	r3, [pc, #148]	; (8001188 <HAL_RCC_ClockConfig+0x1ec>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f023 0207 	bic.w	r2, r3, #7
 80010f8:	4923      	ldr	r1, [pc, #140]	; (8001188 <HAL_RCC_ClockConfig+0x1ec>)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001100:	4b21      	ldr	r3, [pc, #132]	; (8001188 <HAL_RCC_ClockConfig+0x1ec>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0307 	and.w	r3, r3, #7
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	429a      	cmp	r2, r3
 800110c:	d001      	beq.n	8001112 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e036      	b.n	8001180 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0304 	and.w	r3, r3, #4
 800111a:	2b00      	cmp	r3, #0
 800111c:	d008      	beq.n	8001130 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800111e:	4b1b      	ldr	r3, [pc, #108]	; (800118c <HAL_RCC_ClockConfig+0x1f0>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	4918      	ldr	r1, [pc, #96]	; (800118c <HAL_RCC_ClockConfig+0x1f0>)
 800112c:	4313      	orrs	r3, r2
 800112e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0308 	and.w	r3, r3, #8
 8001138:	2b00      	cmp	r3, #0
 800113a:	d009      	beq.n	8001150 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <HAL_RCC_ClockConfig+0x1f0>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	691b      	ldr	r3, [r3, #16]
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	4910      	ldr	r1, [pc, #64]	; (800118c <HAL_RCC_ClockConfig+0x1f0>)
 800114c:	4313      	orrs	r3, r2
 800114e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001150:	f000 f824 	bl	800119c <HAL_RCC_GetSysClockFreq>
 8001154:	4602      	mov	r2, r0
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <HAL_RCC_ClockConfig+0x1f0>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	091b      	lsrs	r3, r3, #4
 800115c:	f003 030f 	and.w	r3, r3, #15
 8001160:	490b      	ldr	r1, [pc, #44]	; (8001190 <HAL_RCC_ClockConfig+0x1f4>)
 8001162:	5ccb      	ldrb	r3, [r1, r3]
 8001164:	f003 031f 	and.w	r3, r3, #31
 8001168:	fa22 f303 	lsr.w	r3, r2, r3
 800116c:	4a09      	ldr	r2, [pc, #36]	; (8001194 <HAL_RCC_ClockConfig+0x1f8>)
 800116e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <HAL_RCC_ClockConfig+0x1fc>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f957 	bl	8000428 <HAL_InitTick>
 800117a:	4603      	mov	r3, r0
 800117c:	72fb      	strb	r3, [r7, #11]

  return status;
 800117e:	7afb      	ldrb	r3, [r7, #11]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40022000 	.word	0x40022000
 800118c:	40021000 	.word	0x40021000
 8001190:	08004100 	.word	0x08004100
 8001194:	20000000 	.word	0x20000000
 8001198:	20000004 	.word	0x20000004

0800119c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011aa:	4b3e      	ldr	r3, [pc, #248]	; (80012a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 030c 	and.w	r3, r3, #12
 80011b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011b4:	4b3b      	ldr	r3, [pc, #236]	; (80012a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d005      	beq.n	80011d0 <HAL_RCC_GetSysClockFreq+0x34>
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	2b0c      	cmp	r3, #12
 80011c8:	d121      	bne.n	800120e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d11e      	bne.n	800120e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80011d0:	4b34      	ldr	r3, [pc, #208]	; (80012a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0308 	and.w	r3, r3, #8
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d107      	bne.n	80011ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80011dc:	4b31      	ldr	r3, [pc, #196]	; (80012a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80011de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011e2:	0a1b      	lsrs	r3, r3, #8
 80011e4:	f003 030f 	and.w	r3, r3, #15
 80011e8:	61fb      	str	r3, [r7, #28]
 80011ea:	e005      	b.n	80011f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80011ec:	4b2d      	ldr	r3, [pc, #180]	; (80012a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	091b      	lsrs	r3, r3, #4
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80011f8:	4a2b      	ldr	r2, [pc, #172]	; (80012a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001200:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d10d      	bne.n	8001224 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800120c:	e00a      	b.n	8001224 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	2b04      	cmp	r3, #4
 8001212:	d102      	bne.n	800121a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001214:	4b25      	ldr	r3, [pc, #148]	; (80012ac <HAL_RCC_GetSysClockFreq+0x110>)
 8001216:	61bb      	str	r3, [r7, #24]
 8001218:	e004      	b.n	8001224 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	2b08      	cmp	r3, #8
 800121e:	d101      	bne.n	8001224 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001220:	4b23      	ldr	r3, [pc, #140]	; (80012b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001222:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	2b0c      	cmp	r3, #12
 8001228:	d134      	bne.n	8001294 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800122a:	4b1e      	ldr	r3, [pc, #120]	; (80012a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d003      	beq.n	8001242 <HAL_RCC_GetSysClockFreq+0xa6>
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	2b03      	cmp	r3, #3
 800123e:	d003      	beq.n	8001248 <HAL_RCC_GetSysClockFreq+0xac>
 8001240:	e005      	b.n	800124e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <HAL_RCC_GetSysClockFreq+0x110>)
 8001244:	617b      	str	r3, [r7, #20]
      break;
 8001246:	e005      	b.n	8001254 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001248:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800124a:	617b      	str	r3, [r7, #20]
      break;
 800124c:	e002      	b.n	8001254 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	617b      	str	r3, [r7, #20]
      break;
 8001252:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001254:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	091b      	lsrs	r3, r3, #4
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	3301      	adds	r3, #1
 8001260:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	0a1b      	lsrs	r3, r3, #8
 8001268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	fb03 f202 	mul.w	r2, r3, r2
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	fbb2 f3f3 	udiv	r3, r2, r3
 8001278:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	0e5b      	lsrs	r3, r3, #25
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	3301      	adds	r3, #1
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800128a:	697a      	ldr	r2, [r7, #20]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001292:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001294:	69bb      	ldr	r3, [r7, #24]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3724      	adds	r7, #36	; 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000
 80012a8:	08004110 	.word	0x08004110
 80012ac:	00f42400 	.word	0x00f42400
 80012b0:	007a1200 	.word	0x007a1200

080012b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80012c0:	4b2a      	ldr	r3, [pc, #168]	; (800136c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80012c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80012cc:	f7ff f9ee 	bl	80006ac <HAL_PWREx_GetVoltageRange>
 80012d0:	6178      	str	r0, [r7, #20]
 80012d2:	e014      	b.n	80012fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80012d4:	4b25      	ldr	r3, [pc, #148]	; (800136c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80012d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d8:	4a24      	ldr	r2, [pc, #144]	; (800136c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80012da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012de:	6593      	str	r3, [r2, #88]	; 0x58
 80012e0:	4b22      	ldr	r3, [pc, #136]	; (800136c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80012e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80012ec:	f7ff f9de 	bl	80006ac <HAL_PWREx_GetVoltageRange>
 80012f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80012f2:	4b1e      	ldr	r3, [pc, #120]	; (800136c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	4a1d      	ldr	r2, [pc, #116]	; (800136c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80012f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001304:	d10b      	bne.n	800131e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b80      	cmp	r3, #128	; 0x80
 800130a:	d919      	bls.n	8001340 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2ba0      	cmp	r3, #160	; 0xa0
 8001310:	d902      	bls.n	8001318 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001312:	2302      	movs	r3, #2
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	e013      	b.n	8001340 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001318:	2301      	movs	r3, #1
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	e010      	b.n	8001340 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b80      	cmp	r3, #128	; 0x80
 8001322:	d902      	bls.n	800132a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001324:	2303      	movs	r3, #3
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	e00a      	b.n	8001340 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b80      	cmp	r3, #128	; 0x80
 800132e:	d102      	bne.n	8001336 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001330:	2302      	movs	r3, #2
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	e004      	b.n	8001340 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b70      	cmp	r3, #112	; 0x70
 800133a:	d101      	bne.n	8001340 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800133c:	2301      	movs	r3, #1
 800133e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f023 0207 	bic.w	r2, r3, #7
 8001348:	4909      	ldr	r1, [pc, #36]	; (8001370 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001350:	4b07      	ldr	r3, [pc, #28]	; (8001370 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	429a      	cmp	r2, r3
 800135c:	d001      	beq.n	8001362 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e000      	b.n	8001364 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40021000 	.word	0x40021000
 8001370:	40022000 	.word	0x40022000

08001374 <__NVIC_SetPriority>:
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	2b00      	cmp	r3, #0
 8001386:	db0a      	blt.n	800139e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	490c      	ldr	r1, [pc, #48]	; (80013c0 <__NVIC_SetPriority+0x4c>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	0112      	lsls	r2, r2, #4
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	440b      	add	r3, r1
 8001398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800139c:	e00a      	b.n	80013b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4908      	ldr	r1, [pc, #32]	; (80013c4 <__NVIC_SetPriority+0x50>)
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	3b04      	subs	r3, #4
 80013ac:	0112      	lsls	r2, r2, #4
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	440b      	add	r3, r1
 80013b2:	761a      	strb	r2, [r3, #24]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000e100 	.word	0xe000e100
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80013cc:	2100      	movs	r1, #0
 80013ce:	f06f 0004 	mvn.w	r0, #4
 80013d2:	f7ff ffcf 	bl	8001374 <__NVIC_SetPriority>
#endif
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80013e2:	f3ef 8305 	mrs	r3, IPSR
 80013e6:	603b      	str	r3, [r7, #0]
  return(result);
 80013e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80013ee:	f06f 0305 	mvn.w	r3, #5
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	e00c      	b.n	8001410 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80013f6:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <osKernelInitialize+0x44>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d105      	bne.n	800140a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80013fe:	4b08      	ldr	r3, [pc, #32]	; (8001420 <osKernelInitialize+0x44>)
 8001400:	2201      	movs	r2, #1
 8001402:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001404:	2300      	movs	r3, #0
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	e002      	b.n	8001410 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
 800140e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001410:	687b      	ldr	r3, [r7, #4]
}
 8001412:	4618      	mov	r0, r3
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000084 	.word	0x20000084

08001424 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800142a:	f3ef 8305 	mrs	r3, IPSR
 800142e:	603b      	str	r3, [r7, #0]
  return(result);
 8001430:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <osKernelStart+0x1a>
    stat = osErrorISR;
 8001436:	f06f 0305 	mvn.w	r3, #5
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	e010      	b.n	8001460 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <osKernelStart+0x48>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d109      	bne.n	800145a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001446:	f7ff ffbf 	bl	80013c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800144a:	4b08      	ldr	r3, [pc, #32]	; (800146c <osKernelStart+0x48>)
 800144c:	2202      	movs	r2, #2
 800144e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001450:	f001 f87c 	bl	800254c <vTaskStartScheduler>
      stat = osOK;
 8001454:	2300      	movs	r3, #0
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	e002      	b.n	8001460 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800145a:	f04f 33ff 	mov.w	r3, #4294967295
 800145e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001460:	687b      	ldr	r3, [r7, #4]
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000084 	.word	0x20000084

08001470 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b08e      	sub	sp, #56	; 0x38
 8001474:	af04      	add	r7, sp, #16
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800147c:	2300      	movs	r3, #0
 800147e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001480:	f3ef 8305 	mrs	r3, IPSR
 8001484:	617b      	str	r3, [r7, #20]
  return(result);
 8001486:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001488:	2b00      	cmp	r3, #0
 800148a:	d17e      	bne.n	800158a <osThreadNew+0x11a>
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d07b      	beq.n	800158a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001492:	2380      	movs	r3, #128	; 0x80
 8001494:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001496:	2318      	movs	r3, #24
 8001498:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800149a:	2300      	movs	r3, #0
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
 80014a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d045      	beq.n	8001536 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d002      	beq.n	80014b8 <osThreadNew+0x48>
        name = attr->name;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d002      	beq.n	80014c6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d008      	beq.n	80014de <osThreadNew+0x6e>
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	2b38      	cmp	r3, #56	; 0x38
 80014d0:	d805      	bhi.n	80014de <osThreadNew+0x6e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <osThreadNew+0x72>
        return (NULL);
 80014de:	2300      	movs	r3, #0
 80014e0:	e054      	b.n	800158c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	089b      	lsrs	r3, r3, #2
 80014f0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00e      	beq.n	8001518 <osThreadNew+0xa8>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	2ba7      	cmp	r3, #167	; 0xa7
 8001500:	d90a      	bls.n	8001518 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001506:	2b00      	cmp	r3, #0
 8001508:	d006      	beq.n	8001518 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d002      	beq.n	8001518 <osThreadNew+0xa8>
        mem = 1;
 8001512:	2301      	movs	r3, #1
 8001514:	61bb      	str	r3, [r7, #24]
 8001516:	e010      	b.n	800153a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10c      	bne.n	800153a <osThreadNew+0xca>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d108      	bne.n	800153a <osThreadNew+0xca>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d104      	bne.n	800153a <osThreadNew+0xca>
          mem = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	e001      	b.n	800153a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d110      	bne.n	8001562 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001548:	9202      	str	r2, [sp, #8]
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	6a3a      	ldr	r2, [r7, #32]
 8001554:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001556:	68f8      	ldr	r0, [r7, #12]
 8001558:	f000 fe0c 	bl	8002174 <xTaskCreateStatic>
 800155c:	4603      	mov	r3, r0
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	e013      	b.n	800158a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d110      	bne.n	800158a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001568:	6a3b      	ldr	r3, [r7, #32]
 800156a:	b29a      	uxth	r2, r3
 800156c:	f107 0310 	add.w	r3, r7, #16
 8001570:	9301      	str	r3, [sp, #4]
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800157a:	68f8      	ldr	r0, [r7, #12]
 800157c:	f000 fe57 	bl	800222e <xTaskCreate>
 8001580:	4603      	mov	r3, r0
 8001582:	2b01      	cmp	r3, #1
 8001584:	d001      	beq.n	800158a <osThreadNew+0x11a>
            hTask = NULL;
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800158a:	693b      	ldr	r3, [r7, #16]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3728      	adds	r7, #40	; 0x28
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800159c:	f3ef 8305 	mrs	r3, IPSR
 80015a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80015a2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <osDelay+0x1c>
    stat = osErrorISR;
 80015a8:	f06f 0305 	mvn.w	r3, #5
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	e007      	b.n	80015c0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d002      	beq.n	80015c0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 ff92 	bl	80024e4 <vTaskDelay>
    }
  }

  return (stat);
 80015c0:	68fb      	ldr	r3, [r7, #12]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80015dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	4a06      	ldr	r2, [pc, #24]	; (80015fc <vApplicationGetIdleTaskMemory+0x30>)
 80015e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2280      	movs	r2, #128	; 0x80
 80015e8:	601a      	str	r2, [r3, #0]
}
 80015ea:	bf00      	nop
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	20000088 	.word	0x20000088
 80015fc:	20000130 	.word	0x20000130

08001600 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4a07      	ldr	r2, [pc, #28]	; (800162c <vApplicationGetTimerTaskMemory+0x2c>)
 8001610:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	4a06      	ldr	r2, [pc, #24]	; (8001630 <vApplicationGetTimerTaskMemory+0x30>)
 8001616:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800161e:	601a      	str	r2, [r3, #0]
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	20000330 	.word	0x20000330
 8001630:	200003d8 	.word	0x200003d8

08001634 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f103 0208 	add.w	r2, r3, #8
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f04f 32ff 	mov.w	r2, #4294967295
 800164c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f103 0208 	add.w	r2, r3, #8
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f103 0208 	add.w	r2, r3, #8
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800168e:	b480      	push	{r7}
 8001690:	b085      	sub	sp, #20
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	1c5a      	adds	r2, r3, #1
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	601a      	str	r2, [r3, #0]
}
 80016ca:	bf00      	nop
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80016d6:	b480      	push	{r7}
 80016d8:	b085      	sub	sp, #20
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ec:	d103      	bne.n	80016f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	e00c      	b.n	8001710 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3308      	adds	r3, #8
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	e002      	b.n	8001704 <vListInsert+0x2e>
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	429a      	cmp	r2, r3
 800170e:	d2f6      	bcs.n	80016fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	601a      	str	r2, [r3, #0]
}
 800173c:	bf00      	nop
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6892      	ldr	r2, [r2, #8]
 800175e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6852      	ldr	r2, [r2, #4]
 8001768:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	429a      	cmp	r2, r3
 8001772:	d103      	bne.n	800177c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	1e5a      	subs	r2, r3, #1
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10a      	bne.n	80017c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80017b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017b4:	f383 8811 	msr	BASEPRI, r3
 80017b8:	f3bf 8f6f 	isb	sy
 80017bc:	f3bf 8f4f 	dsb	sy
 80017c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80017c2:	bf00      	nop
 80017c4:	e7fe      	b.n	80017c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80017c6:	f002 f875 	bl	80038b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d2:	68f9      	ldr	r1, [r7, #12]
 80017d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80017d6:	fb01 f303 	mul.w	r3, r1, r3
 80017da:	441a      	add	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2200      	movs	r2, #0
 80017e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f6:	3b01      	subs	r3, #1
 80017f8:	68f9      	ldr	r1, [r7, #12]
 80017fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80017fc:	fb01 f303 	mul.w	r3, r1, r3
 8001800:	441a      	add	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	22ff      	movs	r2, #255	; 0xff
 800180a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	22ff      	movs	r2, #255	; 0xff
 8001812:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d114      	bne.n	8001846 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d01a      	beq.n	800185a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	3310      	adds	r3, #16
 8001828:	4618      	mov	r0, r3
 800182a:	f001 f929 	bl	8002a80 <xTaskRemoveFromEventList>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d012      	beq.n	800185a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <xQueueGenericReset+0xcc>)
 8001836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	f3bf 8f4f 	dsb	sy
 8001840:	f3bf 8f6f 	isb	sy
 8001844:	e009      	b.n	800185a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	3310      	adds	r3, #16
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fef2 	bl	8001634 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	3324      	adds	r3, #36	; 0x24
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff feed 	bl	8001634 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800185a:	f002 f85b 	bl	8003914 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800185e:	2301      	movs	r3, #1
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	e000ed04 	.word	0xe000ed04

0800186c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08e      	sub	sp, #56	; 0x38
 8001870:	af02      	add	r7, sp, #8
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
 8001878:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d10a      	bne.n	8001896 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001884:	f383 8811 	msr	BASEPRI, r3
 8001888:	f3bf 8f6f 	isb	sy
 800188c:	f3bf 8f4f 	dsb	sy
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001892:	bf00      	nop
 8001894:	e7fe      	b.n	8001894 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10a      	bne.n	80018b2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800189c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018a0:	f383 8811 	msr	BASEPRI, r3
 80018a4:	f3bf 8f6f 	isb	sy
 80018a8:	f3bf 8f4f 	dsb	sy
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80018ae:	bf00      	nop
 80018b0:	e7fe      	b.n	80018b0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d002      	beq.n	80018be <xQueueGenericCreateStatic+0x52>
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <xQueueGenericCreateStatic+0x56>
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <xQueueGenericCreateStatic+0x58>
 80018c2:	2300      	movs	r3, #0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10a      	bne.n	80018de <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80018c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018cc:	f383 8811 	msr	BASEPRI, r3
 80018d0:	f3bf 8f6f 	isb	sy
 80018d4:	f3bf 8f4f 	dsb	sy
 80018d8:	623b      	str	r3, [r7, #32]
}
 80018da:	bf00      	nop
 80018dc:	e7fe      	b.n	80018dc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d102      	bne.n	80018ea <xQueueGenericCreateStatic+0x7e>
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <xQueueGenericCreateStatic+0x82>
 80018ea:	2301      	movs	r3, #1
 80018ec:	e000      	b.n	80018f0 <xQueueGenericCreateStatic+0x84>
 80018ee:	2300      	movs	r3, #0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10a      	bne.n	800190a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80018f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018f8:	f383 8811 	msr	BASEPRI, r3
 80018fc:	f3bf 8f6f 	isb	sy
 8001900:	f3bf 8f4f 	dsb	sy
 8001904:	61fb      	str	r3, [r7, #28]
}
 8001906:	bf00      	nop
 8001908:	e7fe      	b.n	8001908 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800190a:	2350      	movs	r3, #80	; 0x50
 800190c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	2b50      	cmp	r3, #80	; 0x50
 8001912:	d00a      	beq.n	800192a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001918:	f383 8811 	msr	BASEPRI, r3
 800191c:	f3bf 8f6f 	isb	sy
 8001920:	f3bf 8f4f 	dsb	sy
 8001924:	61bb      	str	r3, [r7, #24]
}
 8001926:	bf00      	nop
 8001928:	e7fe      	b.n	8001928 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800192a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00d      	beq.n	8001952 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001938:	2201      	movs	r2, #1
 800193a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800193e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	4613      	mov	r3, r2
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	68b9      	ldr	r1, [r7, #8]
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f000 f805 	bl	800195c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001954:	4618      	mov	r0, r3
 8001956:	3730      	adds	r7, #48	; 0x30
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
 8001968:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d103      	bne.n	8001978 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	e002      	b.n	800197e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800198a:	2101      	movs	r1, #1
 800198c:	69b8      	ldr	r0, [r7, #24]
 800198e:	f7ff ff05 	bl	800179c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	78fa      	ldrb	r2, [r7, #3]
 8001996:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800199a:	bf00      	nop
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08e      	sub	sp, #56	; 0x38
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
 80019b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80019b2:	2300      	movs	r3, #0
 80019b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80019ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d10a      	bne.n	80019d6 <xQueueGenericSend+0x32>
	__asm volatile
 80019c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019c4:	f383 8811 	msr	BASEPRI, r3
 80019c8:	f3bf 8f6f 	isb	sy
 80019cc:	f3bf 8f4f 	dsb	sy
 80019d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80019d2:	bf00      	nop
 80019d4:	e7fe      	b.n	80019d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d103      	bne.n	80019e4 <xQueueGenericSend+0x40>
 80019dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <xQueueGenericSend+0x44>
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <xQueueGenericSend+0x46>
 80019e8:	2300      	movs	r3, #0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10a      	bne.n	8001a04 <xQueueGenericSend+0x60>
	__asm volatile
 80019ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019f2:	f383 8811 	msr	BASEPRI, r3
 80019f6:	f3bf 8f6f 	isb	sy
 80019fa:	f3bf 8f4f 	dsb	sy
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001a00:	bf00      	nop
 8001a02:	e7fe      	b.n	8001a02 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d103      	bne.n	8001a12 <xQueueGenericSend+0x6e>
 8001a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <xQueueGenericSend+0x72>
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <xQueueGenericSend+0x74>
 8001a16:	2300      	movs	r3, #0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10a      	bne.n	8001a32 <xQueueGenericSend+0x8e>
	__asm volatile
 8001a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a20:	f383 8811 	msr	BASEPRI, r3
 8001a24:	f3bf 8f6f 	isb	sy
 8001a28:	f3bf 8f4f 	dsb	sy
 8001a2c:	623b      	str	r3, [r7, #32]
}
 8001a2e:	bf00      	nop
 8001a30:	e7fe      	b.n	8001a30 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001a32:	f001 f9e7 	bl	8002e04 <xTaskGetSchedulerState>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d102      	bne.n	8001a42 <xQueueGenericSend+0x9e>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <xQueueGenericSend+0xa2>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <xQueueGenericSend+0xa4>
 8001a46:	2300      	movs	r3, #0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d10a      	bne.n	8001a62 <xQueueGenericSend+0xbe>
	__asm volatile
 8001a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a50:	f383 8811 	msr	BASEPRI, r3
 8001a54:	f3bf 8f6f 	isb	sy
 8001a58:	f3bf 8f4f 	dsb	sy
 8001a5c:	61fb      	str	r3, [r7, #28]
}
 8001a5e:	bf00      	nop
 8001a60:	e7fe      	b.n	8001a60 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001a62:	f001 ff27 	bl	80038b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d302      	bcc.n	8001a78 <xQueueGenericSend+0xd4>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d129      	bne.n	8001acc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	68b9      	ldr	r1, [r7, #8]
 8001a7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a7e:	f000 fa0b 	bl	8001e98 <prvCopyDataToQueue>
 8001a82:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d010      	beq.n	8001aae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a8e:	3324      	adds	r3, #36	; 0x24
 8001a90:	4618      	mov	r0, r3
 8001a92:	f000 fff5 	bl	8002a80 <xTaskRemoveFromEventList>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d013      	beq.n	8001ac4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001a9c:	4b3f      	ldr	r3, [pc, #252]	; (8001b9c <xQueueGenericSend+0x1f8>)
 8001a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	f3bf 8f4f 	dsb	sy
 8001aa8:	f3bf 8f6f 	isb	sy
 8001aac:	e00a      	b.n	8001ac4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d007      	beq.n	8001ac4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001ab4:	4b39      	ldr	r3, [pc, #228]	; (8001b9c <xQueueGenericSend+0x1f8>)
 8001ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	f3bf 8f4f 	dsb	sy
 8001ac0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001ac4:	f001 ff26 	bl	8003914 <vPortExitCritical>
				return pdPASS;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e063      	b.n	8001b94 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d103      	bne.n	8001ada <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001ad2:	f001 ff1f 	bl	8003914 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	e05c      	b.n	8001b94 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d106      	bne.n	8001aee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f001 f82f 	bl	8002b48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001aea:	2301      	movs	r3, #1
 8001aec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001aee:	f001 ff11 	bl	8003914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001af2:	f000 fd9b 	bl	800262c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001af6:	f001 fedd 	bl	80038b4 <vPortEnterCritical>
 8001afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001afc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b00:	b25b      	sxtb	r3, r3
 8001b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b06:	d103      	bne.n	8001b10 <xQueueGenericSend+0x16c>
 8001b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b16:	b25b      	sxtb	r3, r3
 8001b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b1c:	d103      	bne.n	8001b26 <xQueueGenericSend+0x182>
 8001b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b26:	f001 fef5 	bl	8003914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001b2a:	1d3a      	adds	r2, r7, #4
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	4611      	mov	r1, r2
 8001b32:	4618      	mov	r0, r3
 8001b34:	f001 f81e 	bl	8002b74 <xTaskCheckForTimeOut>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d124      	bne.n	8001b88 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001b3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b40:	f000 faa2 	bl	8002088 <prvIsQueueFull>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d018      	beq.n	8001b7c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b4c:	3310      	adds	r3, #16
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	4611      	mov	r1, r2
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 ff44 	bl	80029e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001b58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b5a:	f000 fa2d 	bl	8001fb8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001b5e:	f000 fd73 	bl	8002648 <xTaskResumeAll>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f47f af7c 	bne.w	8001a62 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8001b6a:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <xQueueGenericSend+0x1f8>)
 8001b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	f3bf 8f4f 	dsb	sy
 8001b76:	f3bf 8f6f 	isb	sy
 8001b7a:	e772      	b.n	8001a62 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b7e:	f000 fa1b 	bl	8001fb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001b82:	f000 fd61 	bl	8002648 <xTaskResumeAll>
 8001b86:	e76c      	b.n	8001a62 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001b88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b8a:	f000 fa15 	bl	8001fb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001b8e:	f000 fd5b 	bl	8002648 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001b92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3738      	adds	r7, #56	; 0x38
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	e000ed04 	.word	0xe000ed04

08001ba0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b090      	sub	sp, #64	; 0x40
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
 8001bac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8001bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10a      	bne.n	8001bce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8001bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bbc:	f383 8811 	msr	BASEPRI, r3
 8001bc0:	f3bf 8f6f 	isb	sy
 8001bc4:	f3bf 8f4f 	dsb	sy
 8001bc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001bca:	bf00      	nop
 8001bcc:	e7fe      	b.n	8001bcc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d103      	bne.n	8001bdc <xQueueGenericSendFromISR+0x3c>
 8001bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <xQueueGenericSendFromISR+0x40>
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <xQueueGenericSendFromISR+0x42>
 8001be0:	2300      	movs	r3, #0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10a      	bne.n	8001bfc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8001be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bea:	f383 8811 	msr	BASEPRI, r3
 8001bee:	f3bf 8f6f 	isb	sy
 8001bf2:	f3bf 8f4f 	dsb	sy
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001bf8:	bf00      	nop
 8001bfa:	e7fe      	b.n	8001bfa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d103      	bne.n	8001c0a <xQueueGenericSendFromISR+0x6a>
 8001c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d101      	bne.n	8001c0e <xQueueGenericSendFromISR+0x6e>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <xQueueGenericSendFromISR+0x70>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10a      	bne.n	8001c2a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8001c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c18:	f383 8811 	msr	BASEPRI, r3
 8001c1c:	f3bf 8f6f 	isb	sy
 8001c20:	f3bf 8f4f 	dsb	sy
 8001c24:	623b      	str	r3, [r7, #32]
}
 8001c26:	bf00      	nop
 8001c28:	e7fe      	b.n	8001c28 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001c2a:	f001 ff25 	bl	8003a78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001c2e:	f3ef 8211 	mrs	r2, BASEPRI
 8001c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c36:	f383 8811 	msr	BASEPRI, r3
 8001c3a:	f3bf 8f6f 	isb	sy
 8001c3e:	f3bf 8f4f 	dsb	sy
 8001c42:	61fa      	str	r2, [r7, #28]
 8001c44:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001c46:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001c48:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d302      	bcc.n	8001c5c <xQueueGenericSendFromISR+0xbc>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d12f      	bne.n	8001cbc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	68b9      	ldr	r1, [r7, #8]
 8001c70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001c72:	f000 f911 	bl	8001e98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001c76:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7e:	d112      	bne.n	8001ca6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d016      	beq.n	8001cb6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c8a:	3324      	adds	r3, #36	; 0x24
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f000 fef7 	bl	8002a80 <xTaskRemoveFromEventList>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00e      	beq.n	8001cb6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00b      	beq.n	8001cb6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	e007      	b.n	8001cb6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001ca6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001caa:	3301      	adds	r3, #1
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	b25a      	sxtb	r2, r3
 8001cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8001cba:	e001      	b.n	8001cc0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cc2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001cca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3740      	adds	r7, #64	; 0x40
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08c      	sub	sp, #48	; 0x30
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10a      	bne.n	8001d08 <xQueueReceive+0x30>
	__asm volatile
 8001cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cf6:	f383 8811 	msr	BASEPRI, r3
 8001cfa:	f3bf 8f6f 	isb	sy
 8001cfe:	f3bf 8f4f 	dsb	sy
 8001d02:	623b      	str	r3, [r7, #32]
}
 8001d04:	bf00      	nop
 8001d06:	e7fe      	b.n	8001d06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d103      	bne.n	8001d16 <xQueueReceive+0x3e>
 8001d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <xQueueReceive+0x42>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <xQueueReceive+0x44>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10a      	bne.n	8001d36 <xQueueReceive+0x5e>
	__asm volatile
 8001d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d24:	f383 8811 	msr	BASEPRI, r3
 8001d28:	f3bf 8f6f 	isb	sy
 8001d2c:	f3bf 8f4f 	dsb	sy
 8001d30:	61fb      	str	r3, [r7, #28]
}
 8001d32:	bf00      	nop
 8001d34:	e7fe      	b.n	8001d34 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001d36:	f001 f865 	bl	8002e04 <xTaskGetSchedulerState>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d102      	bne.n	8001d46 <xQueueReceive+0x6e>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <xQueueReceive+0x72>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <xQueueReceive+0x74>
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10a      	bne.n	8001d66 <xQueueReceive+0x8e>
	__asm volatile
 8001d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d54:	f383 8811 	msr	BASEPRI, r3
 8001d58:	f3bf 8f6f 	isb	sy
 8001d5c:	f3bf 8f4f 	dsb	sy
 8001d60:	61bb      	str	r3, [r7, #24]
}
 8001d62:	bf00      	nop
 8001d64:	e7fe      	b.n	8001d64 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001d66:	f001 fda5 	bl	80038b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d01f      	beq.n	8001db6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001d76:	68b9      	ldr	r1, [r7, #8]
 8001d78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d7a:	f000 f8f7 	bl	8001f6c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	1e5a      	subs	r2, r3, #1
 8001d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d84:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00f      	beq.n	8001dae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d90:	3310      	adds	r3, #16
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 fe74 	bl	8002a80 <xTaskRemoveFromEventList>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d007      	beq.n	8001dae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001d9e:	4b3d      	ldr	r3, [pc, #244]	; (8001e94 <xQueueReceive+0x1bc>)
 8001da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	f3bf 8f4f 	dsb	sy
 8001daa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001dae:	f001 fdb1 	bl	8003914 <vPortExitCritical>
				return pdPASS;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e069      	b.n	8001e8a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d103      	bne.n	8001dc4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001dbc:	f001 fdaa 	bl	8003914 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	e062      	b.n	8001e8a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d106      	bne.n	8001dd8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001dca:	f107 0310 	add.w	r3, r7, #16
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 feba 	bl	8002b48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001dd8:	f001 fd9c 	bl	8003914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001ddc:	f000 fc26 	bl	800262c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001de0:	f001 fd68 	bl	80038b4 <vPortEnterCritical>
 8001de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001dea:	b25b      	sxtb	r3, r3
 8001dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df0:	d103      	bne.n	8001dfa <xQueueReceive+0x122>
 8001df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e00:	b25b      	sxtb	r3, r3
 8001e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e06:	d103      	bne.n	8001e10 <xQueueReceive+0x138>
 8001e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e10:	f001 fd80 	bl	8003914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e14:	1d3a      	adds	r2, r7, #4
 8001e16:	f107 0310 	add.w	r3, r7, #16
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 fea9 	bl	8002b74 <xTaskCheckForTimeOut>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d123      	bne.n	8001e70 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001e28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e2a:	f000 f917 	bl	800205c <prvIsQueueEmpty>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d017      	beq.n	8001e64 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e36:	3324      	adds	r3, #36	; 0x24
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f000 fdcf 	bl	80029e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001e42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e44:	f000 f8b8 	bl	8001fb8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001e48:	f000 fbfe 	bl	8002648 <xTaskResumeAll>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d189      	bne.n	8001d66 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <xQueueReceive+0x1bc>)
 8001e54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	f3bf 8f4f 	dsb	sy
 8001e5e:	f3bf 8f6f 	isb	sy
 8001e62:	e780      	b.n	8001d66 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001e64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e66:	f000 f8a7 	bl	8001fb8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001e6a:	f000 fbed 	bl	8002648 <xTaskResumeAll>
 8001e6e:	e77a      	b.n	8001d66 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001e70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e72:	f000 f8a1 	bl	8001fb8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001e76:	f000 fbe7 	bl	8002648 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001e7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e7c:	f000 f8ee 	bl	800205c <prvIsQueueEmpty>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f43f af6f 	beq.w	8001d66 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001e88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3730      	adds	r7, #48	; 0x30
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	e000ed04 	.word	0xe000ed04

08001e98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10d      	bne.n	8001ed2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d14d      	bne.n	8001f5a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 ffbc 	bl	8002e40 <xTaskPriorityDisinherit>
 8001ec8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	e043      	b.n	8001f5a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d119      	bne.n	8001f0c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6858      	ldr	r0, [r3, #4]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	68b9      	ldr	r1, [r7, #8]
 8001ee4:	f002 f876 	bl	8003fd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	441a      	add	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d32b      	bcc.n	8001f5a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	e026      	b.n	8001f5a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	68d8      	ldr	r0, [r3, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	461a      	mov	r2, r3
 8001f16:	68b9      	ldr	r1, [r7, #8]
 8001f18:	f002 f85c 	bl	8003fd4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	425b      	negs	r3, r3
 8001f26:	441a      	add	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d207      	bcs.n	8001f48 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	425b      	negs	r3, r3
 8001f42:	441a      	add	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d105      	bne.n	8001f5a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1c5a      	adds	r2, r3, #1
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8001f62:	697b      	ldr	r3, [r7, #20]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d018      	beq.n	8001fb0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	441a      	add	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d303      	bcc.n	8001fa0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68d9      	ldr	r1, [r3, #12]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	461a      	mov	r2, r3
 8001faa:	6838      	ldr	r0, [r7, #0]
 8001fac:	f002 f812 	bl	8003fd4 <memcpy>
	}
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001fc0:	f001 fc78 	bl	80038b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001fcc:	e011      	b.n	8001ff2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d012      	beq.n	8001ffc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3324      	adds	r3, #36	; 0x24
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 fd50 	bl	8002a80 <xTaskRemoveFromEventList>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001fe6:	f000 fe27 	bl	8002c38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	dce9      	bgt.n	8001fce <prvUnlockQueue+0x16>
 8001ffa:	e000      	b.n	8001ffe <prvUnlockQueue+0x46>
					break;
 8001ffc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	22ff      	movs	r2, #255	; 0xff
 8002002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002006:	f001 fc85 	bl	8003914 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800200a:	f001 fc53 	bl	80038b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002014:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002016:	e011      	b.n	800203c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d012      	beq.n	8002046 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3310      	adds	r3, #16
 8002024:	4618      	mov	r0, r3
 8002026:	f000 fd2b 	bl	8002a80 <xTaskRemoveFromEventList>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002030:	f000 fe02 	bl	8002c38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002034:	7bbb      	ldrb	r3, [r7, #14]
 8002036:	3b01      	subs	r3, #1
 8002038:	b2db      	uxtb	r3, r3
 800203a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800203c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002040:	2b00      	cmp	r3, #0
 8002042:	dce9      	bgt.n	8002018 <prvUnlockQueue+0x60>
 8002044:	e000      	b.n	8002048 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002046:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	22ff      	movs	r2, #255	; 0xff
 800204c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002050:	f001 fc60 	bl	8003914 <vPortExitCritical>
}
 8002054:	bf00      	nop
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002064:	f001 fc26 	bl	80038b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206c:	2b00      	cmp	r3, #0
 800206e:	d102      	bne.n	8002076 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002070:	2301      	movs	r3, #1
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	e001      	b.n	800207a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800207a:	f001 fc4b 	bl	8003914 <vPortExitCritical>

	return xReturn;
 800207e:	68fb      	ldr	r3, [r7, #12]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002090:	f001 fc10 	bl	80038b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800209c:	429a      	cmp	r2, r3
 800209e:	d102      	bne.n	80020a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80020a0:	2301      	movs	r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	e001      	b.n	80020aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80020aa:	f001 fc33 	bl	8003914 <vPortExitCritical>

	return xReturn;
 80020ae:	68fb      	ldr	r3, [r7, #12]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	e014      	b.n	80020f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80020c8:	4a0f      	ldr	r2, [pc, #60]	; (8002108 <vQueueAddToRegistry+0x50>)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10b      	bne.n	80020ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80020d4:	490c      	ldr	r1, [pc, #48]	; (8002108 <vQueueAddToRegistry+0x50>)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80020de:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <vQueueAddToRegistry+0x50>)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4413      	add	r3, r2
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80020ea:	e006      	b.n	80020fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	3301      	adds	r3, #1
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2b07      	cmp	r3, #7
 80020f6:	d9e7      	bls.n	80020c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80020f8:	bf00      	nop
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	200007d8 	.word	0x200007d8

0800210c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800211c:	f001 fbca 	bl	80038b4 <vPortEnterCritical>
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002126:	b25b      	sxtb	r3, r3
 8002128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212c:	d103      	bne.n	8002136 <vQueueWaitForMessageRestricted+0x2a>
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800213c:	b25b      	sxtb	r3, r3
 800213e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002142:	d103      	bne.n	800214c <vQueueWaitForMessageRestricted+0x40>
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800214c:	f001 fbe2 	bl	8003914 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002154:	2b00      	cmp	r3, #0
 8002156:	d106      	bne.n	8002166 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	3324      	adds	r3, #36	; 0x24
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	68b9      	ldr	r1, [r7, #8]
 8002160:	4618      	mov	r0, r3
 8002162:	f000 fc61 	bl	8002a28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002166:	6978      	ldr	r0, [r7, #20]
 8002168:	f7ff ff26 	bl	8001fb8 <prvUnlockQueue>
	}
 800216c:	bf00      	nop
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08e      	sub	sp, #56	; 0x38
 8002178:	af04      	add	r7, sp, #16
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
 8002180:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10a      	bne.n	800219e <xTaskCreateStatic+0x2a>
	__asm volatile
 8002188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800218c:	f383 8811 	msr	BASEPRI, r3
 8002190:	f3bf 8f6f 	isb	sy
 8002194:	f3bf 8f4f 	dsb	sy
 8002198:	623b      	str	r3, [r7, #32]
}
 800219a:	bf00      	nop
 800219c:	e7fe      	b.n	800219c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800219e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10a      	bne.n	80021ba <xTaskCreateStatic+0x46>
	__asm volatile
 80021a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a8:	f383 8811 	msr	BASEPRI, r3
 80021ac:	f3bf 8f6f 	isb	sy
 80021b0:	f3bf 8f4f 	dsb	sy
 80021b4:	61fb      	str	r3, [r7, #28]
}
 80021b6:	bf00      	nop
 80021b8:	e7fe      	b.n	80021b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80021ba:	23a8      	movs	r3, #168	; 0xa8
 80021bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	2ba8      	cmp	r3, #168	; 0xa8
 80021c2:	d00a      	beq.n	80021da <xTaskCreateStatic+0x66>
	__asm volatile
 80021c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021c8:	f383 8811 	msr	BASEPRI, r3
 80021cc:	f3bf 8f6f 	isb	sy
 80021d0:	f3bf 8f4f 	dsb	sy
 80021d4:	61bb      	str	r3, [r7, #24]
}
 80021d6:	bf00      	nop
 80021d8:	e7fe      	b.n	80021d8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80021da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80021dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d01e      	beq.n	8002220 <xTaskCreateStatic+0xac>
 80021e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d01b      	beq.n	8002220 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80021e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	2202      	movs	r2, #2
 80021f6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80021fa:	2300      	movs	r3, #0
 80021fc:	9303      	str	r3, [sp, #12]
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	9302      	str	r3, [sp, #8]
 8002202:	f107 0314 	add.w	r3, r7, #20
 8002206:	9301      	str	r3, [sp, #4]
 8002208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 f850 	bl	80022b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002218:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800221a:	f000 f8f3 	bl	8002404 <prvAddNewTaskToReadyList>
 800221e:	e001      	b.n	8002224 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002224:	697b      	ldr	r3, [r7, #20]
	}
 8002226:	4618      	mov	r0, r3
 8002228:	3728      	adds	r7, #40	; 0x28
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800222e:	b580      	push	{r7, lr}
 8002230:	b08c      	sub	sp, #48	; 0x30
 8002232:	af04      	add	r7, sp, #16
 8002234:	60f8      	str	r0, [r7, #12]
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	603b      	str	r3, [r7, #0]
 800223a:	4613      	mov	r3, r2
 800223c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800223e:	88fb      	ldrh	r3, [r7, #6]
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4618      	mov	r0, r3
 8002244:	f001 fc58 	bl	8003af8 <pvPortMalloc>
 8002248:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00e      	beq.n	800226e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002250:	20a8      	movs	r0, #168	; 0xa8
 8002252:	f001 fc51 	bl	8003af8 <pvPortMalloc>
 8002256:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	631a      	str	r2, [r3, #48]	; 0x30
 8002264:	e005      	b.n	8002272 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002266:	6978      	ldr	r0, [r7, #20]
 8002268:	f001 fd12 	bl	8003c90 <vPortFree>
 800226c:	e001      	b.n	8002272 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d017      	beq.n	80022a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002280:	88fa      	ldrh	r2, [r7, #6]
 8002282:	2300      	movs	r3, #0
 8002284:	9303      	str	r3, [sp, #12]
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	9302      	str	r3, [sp, #8]
 800228a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228c:	9301      	str	r3, [sp, #4]
 800228e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68b9      	ldr	r1, [r7, #8]
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 f80e 	bl	80022b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800229c:	69f8      	ldr	r0, [r7, #28]
 800229e:	f000 f8b1 	bl	8002404 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80022a2:	2301      	movs	r3, #1
 80022a4:	61bb      	str	r3, [r7, #24]
 80022a6:	e002      	b.n	80022ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80022a8:	f04f 33ff 	mov.w	r3, #4294967295
 80022ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80022ae:	69bb      	ldr	r3, [r7, #24]
	}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3720      	adds	r7, #32
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
 80022c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80022c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	461a      	mov	r2, r3
 80022d0:	21a5      	movs	r1, #165	; 0xa5
 80022d2:	f001 fdfb 	bl	8003ecc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80022d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022e0:	3b01      	subs	r3, #1
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	f023 0307 	bic.w	r3, r3, #7
 80022ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00a      	beq.n	8002310 <prvInitialiseNewTask+0x58>
	__asm volatile
 80022fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022fe:	f383 8811 	msr	BASEPRI, r3
 8002302:	f3bf 8f6f 	isb	sy
 8002306:	f3bf 8f4f 	dsb	sy
 800230a:	617b      	str	r3, [r7, #20]
}
 800230c:	bf00      	nop
 800230e:	e7fe      	b.n	800230e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d01f      	beq.n	8002356 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
 800231a:	e012      	b.n	8002342 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	4413      	add	r3, r2
 8002322:	7819      	ldrb	r1, [r3, #0]
 8002324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	4413      	add	r3, r2
 800232a:	3334      	adds	r3, #52	; 0x34
 800232c:	460a      	mov	r2, r1
 800232e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	4413      	add	r3, r2
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d006      	beq.n	800234a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	3301      	adds	r3, #1
 8002340:	61fb      	str	r3, [r7, #28]
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	2b0f      	cmp	r3, #15
 8002346:	d9e9      	bls.n	800231c <prvInitialiseNewTask+0x64>
 8002348:	e000      	b.n	800234c <prvInitialiseNewTask+0x94>
			{
				break;
 800234a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800234c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002354:	e003      	b.n	800235e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800235e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002360:	2b37      	cmp	r3, #55	; 0x37
 8002362:	d901      	bls.n	8002368 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002364:	2337      	movs	r3, #55	; 0x37
 8002366:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800236c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800236e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002372:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002376:	2200      	movs	r2, #0
 8002378:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800237a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237c:	3304      	adds	r3, #4
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff f978 	bl	8001674 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002386:	3318      	adds	r3, #24
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff f973 	bl	8001674 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800238e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002392:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002396:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800239a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800239e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80023a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a6:	2200      	movs	r2, #0
 80023a8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80023ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80023b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b6:	3354      	adds	r3, #84	; 0x54
 80023b8:	224c      	movs	r2, #76	; 0x4c
 80023ba:	2100      	movs	r1, #0
 80023bc:	4618      	mov	r0, r3
 80023be:	f001 fd85 	bl	8003ecc <memset>
 80023c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c4:	4a0c      	ldr	r2, [pc, #48]	; (80023f8 <prvInitialiseNewTask+0x140>)
 80023c6:	659a      	str	r2, [r3, #88]	; 0x58
 80023c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ca:	4a0c      	ldr	r2, [pc, #48]	; (80023fc <prvInitialiseNewTask+0x144>)
 80023cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80023ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d0:	4a0b      	ldr	r2, [pc, #44]	; (8002400 <prvInitialiseNewTask+0x148>)
 80023d2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	68f9      	ldr	r1, [r7, #12]
 80023d8:	69b8      	ldr	r0, [r7, #24]
 80023da:	f001 f941 	bl	8003660 <pxPortInitialiseStack>
 80023de:	4602      	mov	r2, r0
 80023e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80023e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80023ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80023f0:	bf00      	nop
 80023f2:	3720      	adds	r7, #32
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20001a24 	.word	0x20001a24
 80023fc:	20001a8c 	.word	0x20001a8c
 8002400:	20001af4 	.word	0x20001af4

08002404 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800240c:	f001 fa52 	bl	80038b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002410:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <prvAddNewTaskToReadyList+0xc4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	3301      	adds	r3, #1
 8002416:	4a2c      	ldr	r2, [pc, #176]	; (80024c8 <prvAddNewTaskToReadyList+0xc4>)
 8002418:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800241a:	4b2c      	ldr	r3, [pc, #176]	; (80024cc <prvAddNewTaskToReadyList+0xc8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d109      	bne.n	8002436 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002422:	4a2a      	ldr	r2, [pc, #168]	; (80024cc <prvAddNewTaskToReadyList+0xc8>)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002428:	4b27      	ldr	r3, [pc, #156]	; (80024c8 <prvAddNewTaskToReadyList+0xc4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d110      	bne.n	8002452 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002430:	f000 fc26 	bl	8002c80 <prvInitialiseTaskLists>
 8002434:	e00d      	b.n	8002452 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002436:	4b26      	ldr	r3, [pc, #152]	; (80024d0 <prvAddNewTaskToReadyList+0xcc>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d109      	bne.n	8002452 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800243e:	4b23      	ldr	r3, [pc, #140]	; (80024cc <prvAddNewTaskToReadyList+0xc8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002448:	429a      	cmp	r2, r3
 800244a:	d802      	bhi.n	8002452 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800244c:	4a1f      	ldr	r2, [pc, #124]	; (80024cc <prvAddNewTaskToReadyList+0xc8>)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002452:	4b20      	ldr	r3, [pc, #128]	; (80024d4 <prvAddNewTaskToReadyList+0xd0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	3301      	adds	r3, #1
 8002458:	4a1e      	ldr	r2, [pc, #120]	; (80024d4 <prvAddNewTaskToReadyList+0xd0>)
 800245a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800245c:	4b1d      	ldr	r3, [pc, #116]	; (80024d4 <prvAddNewTaskToReadyList+0xd0>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002468:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <prvAddNewTaskToReadyList+0xd4>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d903      	bls.n	8002478 <prvAddNewTaskToReadyList+0x74>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	4a18      	ldr	r2, [pc, #96]	; (80024d8 <prvAddNewTaskToReadyList+0xd4>)
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4a15      	ldr	r2, [pc, #84]	; (80024dc <prvAddNewTaskToReadyList+0xd8>)
 8002486:	441a      	add	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3304      	adds	r3, #4
 800248c:	4619      	mov	r1, r3
 800248e:	4610      	mov	r0, r2
 8002490:	f7ff f8fd 	bl	800168e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002494:	f001 fa3e 	bl	8003914 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002498:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <prvAddNewTaskToReadyList+0xcc>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00e      	beq.n	80024be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80024a0:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <prvAddNewTaskToReadyList+0xc8>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d207      	bcs.n	80024be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80024ae:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <prvAddNewTaskToReadyList+0xdc>)
 80024b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	f3bf 8f4f 	dsb	sy
 80024ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000cec 	.word	0x20000cec
 80024cc:	20000818 	.word	0x20000818
 80024d0:	20000cf8 	.word	0x20000cf8
 80024d4:	20000d08 	.word	0x20000d08
 80024d8:	20000cf4 	.word	0x20000cf4
 80024dc:	2000081c 	.word	0x2000081c
 80024e0:	e000ed04 	.word	0xe000ed04

080024e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d017      	beq.n	8002526 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80024f6:	4b13      	ldr	r3, [pc, #76]	; (8002544 <vTaskDelay+0x60>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00a      	beq.n	8002514 <vTaskDelay+0x30>
	__asm volatile
 80024fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002502:	f383 8811 	msr	BASEPRI, r3
 8002506:	f3bf 8f6f 	isb	sy
 800250a:	f3bf 8f4f 	dsb	sy
 800250e:	60bb      	str	r3, [r7, #8]
}
 8002510:	bf00      	nop
 8002512:	e7fe      	b.n	8002512 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002514:	f000 f88a 	bl	800262c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002518:	2100      	movs	r1, #0
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 fcfe 	bl	8002f1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002520:	f000 f892 	bl	8002648 <xTaskResumeAll>
 8002524:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d107      	bne.n	800253c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800252c:	4b06      	ldr	r3, [pc, #24]	; (8002548 <vTaskDelay+0x64>)
 800252e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	f3bf 8f4f 	dsb	sy
 8002538:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800253c:	bf00      	nop
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20000d14 	.word	0x20000d14
 8002548:	e000ed04 	.word	0xe000ed04

0800254c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08a      	sub	sp, #40	; 0x28
 8002550:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002556:	2300      	movs	r3, #0
 8002558:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800255a:	463a      	mov	r2, r7
 800255c:	1d39      	adds	r1, r7, #4
 800255e:	f107 0308 	add.w	r3, r7, #8
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff f832 	bl	80015cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002568:	6839      	ldr	r1, [r7, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	9202      	str	r2, [sp, #8]
 8002570:	9301      	str	r3, [sp, #4]
 8002572:	2300      	movs	r3, #0
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	2300      	movs	r3, #0
 8002578:	460a      	mov	r2, r1
 800257a:	4924      	ldr	r1, [pc, #144]	; (800260c <vTaskStartScheduler+0xc0>)
 800257c:	4824      	ldr	r0, [pc, #144]	; (8002610 <vTaskStartScheduler+0xc4>)
 800257e:	f7ff fdf9 	bl	8002174 <xTaskCreateStatic>
 8002582:	4603      	mov	r3, r0
 8002584:	4a23      	ldr	r2, [pc, #140]	; (8002614 <vTaskStartScheduler+0xc8>)
 8002586:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002588:	4b22      	ldr	r3, [pc, #136]	; (8002614 <vTaskStartScheduler+0xc8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d002      	beq.n	8002596 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002590:	2301      	movs	r3, #1
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	e001      	b.n	800259a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d102      	bne.n	80025a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80025a0:	f000 fd10 	bl	8002fc4 <xTimerCreateTimerTask>
 80025a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d11b      	bne.n	80025e4 <vTaskStartScheduler+0x98>
	__asm volatile
 80025ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b0:	f383 8811 	msr	BASEPRI, r3
 80025b4:	f3bf 8f6f 	isb	sy
 80025b8:	f3bf 8f4f 	dsb	sy
 80025bc:	613b      	str	r3, [r7, #16]
}
 80025be:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80025c0:	4b15      	ldr	r3, [pc, #84]	; (8002618 <vTaskStartScheduler+0xcc>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	3354      	adds	r3, #84	; 0x54
 80025c6:	4a15      	ldr	r2, [pc, #84]	; (800261c <vTaskStartScheduler+0xd0>)
 80025c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80025ca:	4b15      	ldr	r3, [pc, #84]	; (8002620 <vTaskStartScheduler+0xd4>)
 80025cc:	f04f 32ff 	mov.w	r2, #4294967295
 80025d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80025d2:	4b14      	ldr	r3, [pc, #80]	; (8002624 <vTaskStartScheduler+0xd8>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80025d8:	4b13      	ldr	r3, [pc, #76]	; (8002628 <vTaskStartScheduler+0xdc>)
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80025de:	f001 f8c7 	bl	8003770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80025e2:	e00e      	b.n	8002602 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ea:	d10a      	bne.n	8002602 <vTaskStartScheduler+0xb6>
	__asm volatile
 80025ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f0:	f383 8811 	msr	BASEPRI, r3
 80025f4:	f3bf 8f6f 	isb	sy
 80025f8:	f3bf 8f4f 	dsb	sy
 80025fc:	60fb      	str	r3, [r7, #12]
}
 80025fe:	bf00      	nop
 8002600:	e7fe      	b.n	8002600 <vTaskStartScheduler+0xb4>
}
 8002602:	bf00      	nop
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	080040c4 	.word	0x080040c4
 8002610:	08002c51 	.word	0x08002c51
 8002614:	20000d10 	.word	0x20000d10
 8002618:	20000818 	.word	0x20000818
 800261c:	2000005c 	.word	0x2000005c
 8002620:	20000d0c 	.word	0x20000d0c
 8002624:	20000cf8 	.word	0x20000cf8
 8002628:	20000cf0 	.word	0x20000cf0

0800262c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002630:	4b04      	ldr	r3, [pc, #16]	; (8002644 <vTaskSuspendAll+0x18>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	3301      	adds	r3, #1
 8002636:	4a03      	ldr	r2, [pc, #12]	; (8002644 <vTaskSuspendAll+0x18>)
 8002638:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800263a:	bf00      	nop
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	20000d14 	.word	0x20000d14

08002648 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002652:	2300      	movs	r3, #0
 8002654:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002656:	4b42      	ldr	r3, [pc, #264]	; (8002760 <xTaskResumeAll+0x118>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10a      	bne.n	8002674 <xTaskResumeAll+0x2c>
	__asm volatile
 800265e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002662:	f383 8811 	msr	BASEPRI, r3
 8002666:	f3bf 8f6f 	isb	sy
 800266a:	f3bf 8f4f 	dsb	sy
 800266e:	603b      	str	r3, [r7, #0]
}
 8002670:	bf00      	nop
 8002672:	e7fe      	b.n	8002672 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002674:	f001 f91e 	bl	80038b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002678:	4b39      	ldr	r3, [pc, #228]	; (8002760 <xTaskResumeAll+0x118>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	3b01      	subs	r3, #1
 800267e:	4a38      	ldr	r2, [pc, #224]	; (8002760 <xTaskResumeAll+0x118>)
 8002680:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002682:	4b37      	ldr	r3, [pc, #220]	; (8002760 <xTaskResumeAll+0x118>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d162      	bne.n	8002750 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800268a:	4b36      	ldr	r3, [pc, #216]	; (8002764 <xTaskResumeAll+0x11c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d05e      	beq.n	8002750 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002692:	e02f      	b.n	80026f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002694:	4b34      	ldr	r3, [pc, #208]	; (8002768 <xTaskResumeAll+0x120>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	3318      	adds	r3, #24
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff f851 	bl	8001748 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	3304      	adds	r3, #4
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff f84c 	bl	8001748 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b4:	4b2d      	ldr	r3, [pc, #180]	; (800276c <xTaskResumeAll+0x124>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d903      	bls.n	80026c4 <xTaskResumeAll+0x7c>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c0:	4a2a      	ldr	r2, [pc, #168]	; (800276c <xTaskResumeAll+0x124>)
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4a27      	ldr	r2, [pc, #156]	; (8002770 <xTaskResumeAll+0x128>)
 80026d2:	441a      	add	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	3304      	adds	r3, #4
 80026d8:	4619      	mov	r1, r3
 80026da:	4610      	mov	r0, r2
 80026dc:	f7fe ffd7 	bl	800168e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e4:	4b23      	ldr	r3, [pc, #140]	; (8002774 <xTaskResumeAll+0x12c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d302      	bcc.n	80026f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80026ee:	4b22      	ldr	r3, [pc, #136]	; (8002778 <xTaskResumeAll+0x130>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026f4:	4b1c      	ldr	r3, [pc, #112]	; (8002768 <xTaskResumeAll+0x120>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1cb      	bne.n	8002694 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002702:	f000 fb5f 	bl	8002dc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002706:	4b1d      	ldr	r3, [pc, #116]	; (800277c <xTaskResumeAll+0x134>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d010      	beq.n	8002734 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002712:	f000 f847 	bl	80027a4 <xTaskIncrementTick>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800271c:	4b16      	ldr	r3, [pc, #88]	; (8002778 <xTaskResumeAll+0x130>)
 800271e:	2201      	movs	r2, #1
 8002720:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3b01      	subs	r3, #1
 8002726:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f1      	bne.n	8002712 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800272e:	4b13      	ldr	r3, [pc, #76]	; (800277c <xTaskResumeAll+0x134>)
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002734:	4b10      	ldr	r3, [pc, #64]	; (8002778 <xTaskResumeAll+0x130>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d009      	beq.n	8002750 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800273c:	2301      	movs	r3, #1
 800273e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002740:	4b0f      	ldr	r3, [pc, #60]	; (8002780 <xTaskResumeAll+0x138>)
 8002742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	f3bf 8f4f 	dsb	sy
 800274c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002750:	f001 f8e0 	bl	8003914 <vPortExitCritical>

	return xAlreadyYielded;
 8002754:	68bb      	ldr	r3, [r7, #8]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000d14 	.word	0x20000d14
 8002764:	20000cec 	.word	0x20000cec
 8002768:	20000cac 	.word	0x20000cac
 800276c:	20000cf4 	.word	0x20000cf4
 8002770:	2000081c 	.word	0x2000081c
 8002774:	20000818 	.word	0x20000818
 8002778:	20000d00 	.word	0x20000d00
 800277c:	20000cfc 	.word	0x20000cfc
 8002780:	e000ed04 	.word	0xe000ed04

08002784 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800278a:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <xTaskGetTickCount+0x1c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002790:	687b      	ldr	r3, [r7, #4]
}
 8002792:	4618      	mov	r0, r3
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	20000cf0 	.word	0x20000cf0

080027a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027ae:	4b4f      	ldr	r3, [pc, #316]	; (80028ec <xTaskIncrementTick+0x148>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f040 808f 	bne.w	80028d6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80027b8:	4b4d      	ldr	r3, [pc, #308]	; (80028f0 <xTaskIncrementTick+0x14c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	3301      	adds	r3, #1
 80027be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80027c0:	4a4b      	ldr	r2, [pc, #300]	; (80028f0 <xTaskIncrementTick+0x14c>)
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d120      	bne.n	800280e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80027cc:	4b49      	ldr	r3, [pc, #292]	; (80028f4 <xTaskIncrementTick+0x150>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00a      	beq.n	80027ec <xTaskIncrementTick+0x48>
	__asm volatile
 80027d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027da:	f383 8811 	msr	BASEPRI, r3
 80027de:	f3bf 8f6f 	isb	sy
 80027e2:	f3bf 8f4f 	dsb	sy
 80027e6:	603b      	str	r3, [r7, #0]
}
 80027e8:	bf00      	nop
 80027ea:	e7fe      	b.n	80027ea <xTaskIncrementTick+0x46>
 80027ec:	4b41      	ldr	r3, [pc, #260]	; (80028f4 <xTaskIncrementTick+0x150>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	4b41      	ldr	r3, [pc, #260]	; (80028f8 <xTaskIncrementTick+0x154>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a3f      	ldr	r2, [pc, #252]	; (80028f4 <xTaskIncrementTick+0x150>)
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	4a3f      	ldr	r2, [pc, #252]	; (80028f8 <xTaskIncrementTick+0x154>)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	4b3e      	ldr	r3, [pc, #248]	; (80028fc <xTaskIncrementTick+0x158>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	3301      	adds	r3, #1
 8002806:	4a3d      	ldr	r2, [pc, #244]	; (80028fc <xTaskIncrementTick+0x158>)
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	f000 fadb 	bl	8002dc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800280e:	4b3c      	ldr	r3, [pc, #240]	; (8002900 <xTaskIncrementTick+0x15c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	429a      	cmp	r2, r3
 8002816:	d349      	bcc.n	80028ac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002818:	4b36      	ldr	r3, [pc, #216]	; (80028f4 <xTaskIncrementTick+0x150>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d104      	bne.n	800282c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002822:	4b37      	ldr	r3, [pc, #220]	; (8002900 <xTaskIncrementTick+0x15c>)
 8002824:	f04f 32ff 	mov.w	r2, #4294967295
 8002828:	601a      	str	r2, [r3, #0]
					break;
 800282a:	e03f      	b.n	80028ac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800282c:	4b31      	ldr	r3, [pc, #196]	; (80028f4 <xTaskIncrementTick+0x150>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	429a      	cmp	r2, r3
 8002842:	d203      	bcs.n	800284c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002844:	4a2e      	ldr	r2, [pc, #184]	; (8002900 <xTaskIncrementTick+0x15c>)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800284a:	e02f      	b.n	80028ac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	3304      	adds	r3, #4
 8002850:	4618      	mov	r0, r3
 8002852:	f7fe ff79 	bl	8001748 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285a:	2b00      	cmp	r3, #0
 800285c:	d004      	beq.n	8002868 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	3318      	adds	r3, #24
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe ff70 	bl	8001748 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800286c:	4b25      	ldr	r3, [pc, #148]	; (8002904 <xTaskIncrementTick+0x160>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	d903      	bls.n	800287c <xTaskIncrementTick+0xd8>
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002878:	4a22      	ldr	r2, [pc, #136]	; (8002904 <xTaskIncrementTick+0x160>)
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4a1f      	ldr	r2, [pc, #124]	; (8002908 <xTaskIncrementTick+0x164>)
 800288a:	441a      	add	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	3304      	adds	r3, #4
 8002890:	4619      	mov	r1, r3
 8002892:	4610      	mov	r0, r2
 8002894:	f7fe fefb 	bl	800168e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800289c:	4b1b      	ldr	r3, [pc, #108]	; (800290c <xTaskIncrementTick+0x168>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d3b8      	bcc.n	8002818 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80028a6:	2301      	movs	r3, #1
 80028a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028aa:	e7b5      	b.n	8002818 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80028ac:	4b17      	ldr	r3, [pc, #92]	; (800290c <xTaskIncrementTick+0x168>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b2:	4915      	ldr	r1, [pc, #84]	; (8002908 <xTaskIncrementTick+0x164>)
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d901      	bls.n	80028c8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80028c4:	2301      	movs	r3, #1
 80028c6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80028c8:	4b11      	ldr	r3, [pc, #68]	; (8002910 <xTaskIncrementTick+0x16c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d007      	beq.n	80028e0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80028d0:	2301      	movs	r3, #1
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	e004      	b.n	80028e0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80028d6:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <xTaskIncrementTick+0x170>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	3301      	adds	r3, #1
 80028dc:	4a0d      	ldr	r2, [pc, #52]	; (8002914 <xTaskIncrementTick+0x170>)
 80028de:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80028e0:	697b      	ldr	r3, [r7, #20]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	20000d14 	.word	0x20000d14
 80028f0:	20000cf0 	.word	0x20000cf0
 80028f4:	20000ca4 	.word	0x20000ca4
 80028f8:	20000ca8 	.word	0x20000ca8
 80028fc:	20000d04 	.word	0x20000d04
 8002900:	20000d0c 	.word	0x20000d0c
 8002904:	20000cf4 	.word	0x20000cf4
 8002908:	2000081c 	.word	0x2000081c
 800290c:	20000818 	.word	0x20000818
 8002910:	20000d00 	.word	0x20000d00
 8002914:	20000cfc 	.word	0x20000cfc

08002918 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800291e:	4b2a      	ldr	r3, [pc, #168]	; (80029c8 <vTaskSwitchContext+0xb0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002926:	4b29      	ldr	r3, [pc, #164]	; (80029cc <vTaskSwitchContext+0xb4>)
 8002928:	2201      	movs	r2, #1
 800292a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800292c:	e046      	b.n	80029bc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800292e:	4b27      	ldr	r3, [pc, #156]	; (80029cc <vTaskSwitchContext+0xb4>)
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002934:	4b26      	ldr	r3, [pc, #152]	; (80029d0 <vTaskSwitchContext+0xb8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	e010      	b.n	800295e <vTaskSwitchContext+0x46>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10a      	bne.n	8002958 <vTaskSwitchContext+0x40>
	__asm volatile
 8002942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002946:	f383 8811 	msr	BASEPRI, r3
 800294a:	f3bf 8f6f 	isb	sy
 800294e:	f3bf 8f4f 	dsb	sy
 8002952:	607b      	str	r3, [r7, #4]
}
 8002954:	bf00      	nop
 8002956:	e7fe      	b.n	8002956 <vTaskSwitchContext+0x3e>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	3b01      	subs	r3, #1
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	491d      	ldr	r1, [pc, #116]	; (80029d4 <vTaskSwitchContext+0xbc>)
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	4613      	mov	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	440b      	add	r3, r1
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0e4      	beq.n	800293c <vTaskSwitchContext+0x24>
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4a15      	ldr	r2, [pc, #84]	; (80029d4 <vTaskSwitchContext+0xbc>)
 800297e:	4413      	add	r3, r2
 8002980:	60bb      	str	r3, [r7, #8]
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	605a      	str	r2, [r3, #4]
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	3308      	adds	r3, #8
 8002994:	429a      	cmp	r2, r3
 8002996:	d104      	bne.n	80029a2 <vTaskSwitchContext+0x8a>
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4a0b      	ldr	r2, [pc, #44]	; (80029d8 <vTaskSwitchContext+0xc0>)
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	4a08      	ldr	r2, [pc, #32]	; (80029d0 <vTaskSwitchContext+0xb8>)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80029b2:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <vTaskSwitchContext+0xc0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	3354      	adds	r3, #84	; 0x54
 80029b8:	4a08      	ldr	r2, [pc, #32]	; (80029dc <vTaskSwitchContext+0xc4>)
 80029ba:	6013      	str	r3, [r2, #0]
}
 80029bc:	bf00      	nop
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	20000d14 	.word	0x20000d14
 80029cc:	20000d00 	.word	0x20000d00
 80029d0:	20000cf4 	.word	0x20000cf4
 80029d4:	2000081c 	.word	0x2000081c
 80029d8:	20000818 	.word	0x20000818
 80029dc:	2000005c 	.word	0x2000005c

080029e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10a      	bne.n	8002a06 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80029f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f4:	f383 8811 	msr	BASEPRI, r3
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	60fb      	str	r3, [r7, #12]
}
 8002a02:	bf00      	nop
 8002a04:	e7fe      	b.n	8002a04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002a06:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <vTaskPlaceOnEventList+0x44>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	3318      	adds	r3, #24
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7fe fe61 	bl	80016d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002a14:	2101      	movs	r1, #1
 8002a16:	6838      	ldr	r0, [r7, #0]
 8002a18:	f000 fa80 	bl	8002f1c <prvAddCurrentTaskToDelayedList>
}
 8002a1c:	bf00      	nop
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20000818 	.word	0x20000818

08002a28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10a      	bne.n	8002a50 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8002a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3e:	f383 8811 	msr	BASEPRI, r3
 8002a42:	f3bf 8f6f 	isb	sy
 8002a46:	f3bf 8f4f 	dsb	sy
 8002a4a:	617b      	str	r3, [r7, #20]
}
 8002a4c:	bf00      	nop
 8002a4e:	e7fe      	b.n	8002a4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002a50:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <vTaskPlaceOnEventListRestricted+0x54>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	3318      	adds	r3, #24
 8002a56:	4619      	mov	r1, r3
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f7fe fe18 	bl	800168e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8002a64:	f04f 33ff 	mov.w	r3, #4294967295
 8002a68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	68b8      	ldr	r0, [r7, #8]
 8002a6e:	f000 fa55 	bl	8002f1c <prvAddCurrentTaskToDelayedList>
	}
 8002a72:	bf00      	nop
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000818 	.word	0x20000818

08002a80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10a      	bne.n	8002aac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9a:	f383 8811 	msr	BASEPRI, r3
 8002a9e:	f3bf 8f6f 	isb	sy
 8002aa2:	f3bf 8f4f 	dsb	sy
 8002aa6:	60fb      	str	r3, [r7, #12]
}
 8002aa8:	bf00      	nop
 8002aaa:	e7fe      	b.n	8002aaa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	3318      	adds	r3, #24
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fe fe49 	bl	8001748 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ab6:	4b1e      	ldr	r3, [pc, #120]	; (8002b30 <xTaskRemoveFromEventList+0xb0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d11d      	bne.n	8002afa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe fe40 	bl	8001748 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002acc:	4b19      	ldr	r3, [pc, #100]	; (8002b34 <xTaskRemoveFromEventList+0xb4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d903      	bls.n	8002adc <xTaskRemoveFromEventList+0x5c>
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad8:	4a16      	ldr	r2, [pc, #88]	; (8002b34 <xTaskRemoveFromEventList+0xb4>)
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4a13      	ldr	r2, [pc, #76]	; (8002b38 <xTaskRemoveFromEventList+0xb8>)
 8002aea:	441a      	add	r2, r3
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	3304      	adds	r3, #4
 8002af0:	4619      	mov	r1, r3
 8002af2:	4610      	mov	r0, r2
 8002af4:	f7fe fdcb 	bl	800168e <vListInsertEnd>
 8002af8:	e005      	b.n	8002b06 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	3318      	adds	r3, #24
 8002afe:	4619      	mov	r1, r3
 8002b00:	480e      	ldr	r0, [pc, #56]	; (8002b3c <xTaskRemoveFromEventList+0xbc>)
 8002b02:	f7fe fdc4 	bl	800168e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b0a:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <xTaskRemoveFromEventList+0xc0>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d905      	bls.n	8002b20 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002b14:	2301      	movs	r3, #1
 8002b16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002b18:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <xTaskRemoveFromEventList+0xc4>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	e001      	b.n	8002b24 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002b24:	697b      	ldr	r3, [r7, #20]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000d14 	.word	0x20000d14
 8002b34:	20000cf4 	.word	0x20000cf4
 8002b38:	2000081c 	.word	0x2000081c
 8002b3c:	20000cac 	.word	0x20000cac
 8002b40:	20000818 	.word	0x20000818
 8002b44:	20000d00 	.word	0x20000d00

08002b48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <vTaskInternalSetTimeOutState+0x24>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002b58:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <vTaskInternalSetTimeOutState+0x28>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	605a      	str	r2, [r3, #4]
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	20000d04 	.word	0x20000d04
 8002b70:	20000cf0 	.word	0x20000cf0

08002b74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b088      	sub	sp, #32
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10a      	bne.n	8002b9a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b88:	f383 8811 	msr	BASEPRI, r3
 8002b8c:	f3bf 8f6f 	isb	sy
 8002b90:	f3bf 8f4f 	dsb	sy
 8002b94:	613b      	str	r3, [r7, #16]
}
 8002b96:	bf00      	nop
 8002b98:	e7fe      	b.n	8002b98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10a      	bne.n	8002bb6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba4:	f383 8811 	msr	BASEPRI, r3
 8002ba8:	f3bf 8f6f 	isb	sy
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	60fb      	str	r3, [r7, #12]
}
 8002bb2:	bf00      	nop
 8002bb4:	e7fe      	b.n	8002bb4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002bb6:	f000 fe7d 	bl	80038b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002bba:	4b1d      	ldr	r3, [pc, #116]	; (8002c30 <xTaskCheckForTimeOut+0xbc>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd2:	d102      	bne.n	8002bda <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	61fb      	str	r3, [r7, #28]
 8002bd8:	e023      	b.n	8002c22 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	4b15      	ldr	r3, [pc, #84]	; (8002c34 <xTaskCheckForTimeOut+0xc0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d007      	beq.n	8002bf6 <xTaskCheckForTimeOut+0x82>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d302      	bcc.n	8002bf6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	61fb      	str	r3, [r7, #28]
 8002bf4:	e015      	b.n	8002c22 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d20b      	bcs.n	8002c18 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	1ad2      	subs	r2, r2, r3
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7ff ff9b 	bl	8002b48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61fb      	str	r3, [r7, #28]
 8002c16:	e004      	b.n	8002c22 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002c22:	f000 fe77 	bl	8003914 <vPortExitCritical>

	return xReturn;
 8002c26:	69fb      	ldr	r3, [r7, #28]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3720      	adds	r7, #32
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	20000cf0 	.word	0x20000cf0
 8002c34:	20000d04 	.word	0x20000d04

08002c38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002c3c:	4b03      	ldr	r3, [pc, #12]	; (8002c4c <vTaskMissedYield+0x14>)
 8002c3e:	2201      	movs	r2, #1
 8002c40:	601a      	str	r2, [r3, #0]
}
 8002c42:	bf00      	nop
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	20000d00 	.word	0x20000d00

08002c50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002c58:	f000 f852 	bl	8002d00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002c5c:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <prvIdleTask+0x28>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d9f9      	bls.n	8002c58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002c64:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <prvIdleTask+0x2c>)
 8002c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002c74:	e7f0      	b.n	8002c58 <prvIdleTask+0x8>
 8002c76:	bf00      	nop
 8002c78:	2000081c 	.word	0x2000081c
 8002c7c:	e000ed04 	.word	0xe000ed04

08002c80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c86:	2300      	movs	r3, #0
 8002c88:	607b      	str	r3, [r7, #4]
 8002c8a:	e00c      	b.n	8002ca6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4a12      	ldr	r2, [pc, #72]	; (8002ce0 <prvInitialiseTaskLists+0x60>)
 8002c98:	4413      	add	r3, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe fcca 	bl	8001634 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	607b      	str	r3, [r7, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b37      	cmp	r3, #55	; 0x37
 8002caa:	d9ef      	bls.n	8002c8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002cac:	480d      	ldr	r0, [pc, #52]	; (8002ce4 <prvInitialiseTaskLists+0x64>)
 8002cae:	f7fe fcc1 	bl	8001634 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002cb2:	480d      	ldr	r0, [pc, #52]	; (8002ce8 <prvInitialiseTaskLists+0x68>)
 8002cb4:	f7fe fcbe 	bl	8001634 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002cb8:	480c      	ldr	r0, [pc, #48]	; (8002cec <prvInitialiseTaskLists+0x6c>)
 8002cba:	f7fe fcbb 	bl	8001634 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002cbe:	480c      	ldr	r0, [pc, #48]	; (8002cf0 <prvInitialiseTaskLists+0x70>)
 8002cc0:	f7fe fcb8 	bl	8001634 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002cc4:	480b      	ldr	r0, [pc, #44]	; (8002cf4 <prvInitialiseTaskLists+0x74>)
 8002cc6:	f7fe fcb5 	bl	8001634 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002cca:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <prvInitialiseTaskLists+0x78>)
 8002ccc:	4a05      	ldr	r2, [pc, #20]	; (8002ce4 <prvInitialiseTaskLists+0x64>)
 8002cce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002cd0:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <prvInitialiseTaskLists+0x7c>)
 8002cd2:	4a05      	ldr	r2, [pc, #20]	; (8002ce8 <prvInitialiseTaskLists+0x68>)
 8002cd4:	601a      	str	r2, [r3, #0]
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	2000081c 	.word	0x2000081c
 8002ce4:	20000c7c 	.word	0x20000c7c
 8002ce8:	20000c90 	.word	0x20000c90
 8002cec:	20000cac 	.word	0x20000cac
 8002cf0:	20000cc0 	.word	0x20000cc0
 8002cf4:	20000cd8 	.word	0x20000cd8
 8002cf8:	20000ca4 	.word	0x20000ca4
 8002cfc:	20000ca8 	.word	0x20000ca8

08002d00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d06:	e019      	b.n	8002d3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002d08:	f000 fdd4 	bl	80038b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d0c:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <prvCheckTasksWaitingTermination+0x50>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3304      	adds	r3, #4
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fe fd15 	bl	8001748 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <prvCheckTasksWaitingTermination+0x54>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	4a0b      	ldr	r2, [pc, #44]	; (8002d54 <prvCheckTasksWaitingTermination+0x54>)
 8002d26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002d28:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <prvCheckTasksWaitingTermination+0x58>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	4a0a      	ldr	r2, [pc, #40]	; (8002d58 <prvCheckTasksWaitingTermination+0x58>)
 8002d30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002d32:	f000 fdef 	bl	8003914 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f810 	bl	8002d5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <prvCheckTasksWaitingTermination+0x58>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1e1      	bne.n	8002d08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002d44:	bf00      	nop
 8002d46:	bf00      	nop
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20000cc0 	.word	0x20000cc0
 8002d54:	20000cec 	.word	0x20000cec
 8002d58:	20000cd4 	.word	0x20000cd4

08002d5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3354      	adds	r3, #84	; 0x54
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f001 f8b7 	bl	8003edc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d108      	bne.n	8002d8a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 ff87 	bl	8003c90 <vPortFree>
				vPortFree( pxTCB );
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 ff84 	bl	8003c90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002d88:	e018      	b.n	8002dbc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d103      	bne.n	8002d9c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 ff7b 	bl	8003c90 <vPortFree>
	}
 8002d9a:	e00f      	b.n	8002dbc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d00a      	beq.n	8002dbc <prvDeleteTCB+0x60>
	__asm volatile
 8002da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002daa:	f383 8811 	msr	BASEPRI, r3
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	f3bf 8f4f 	dsb	sy
 8002db6:	60fb      	str	r3, [r7, #12]
}
 8002db8:	bf00      	nop
 8002dba:	e7fe      	b.n	8002dba <prvDeleteTCB+0x5e>
	}
 8002dbc:	bf00      	nop
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dca:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <prvResetNextTaskUnblockTime+0x38>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d104      	bne.n	8002dde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002dd4:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <prvResetNextTaskUnblockTime+0x3c>)
 8002dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8002dda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002ddc:	e008      	b.n	8002df0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dde:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <prvResetNextTaskUnblockTime+0x38>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	4a04      	ldr	r2, [pc, #16]	; (8002e00 <prvResetNextTaskUnblockTime+0x3c>)
 8002dee:	6013      	str	r3, [r2, #0]
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	20000ca4 	.word	0x20000ca4
 8002e00:	20000d0c 	.word	0x20000d0c

08002e04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002e0a:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <xTaskGetSchedulerState+0x34>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d102      	bne.n	8002e18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002e12:	2301      	movs	r3, #1
 8002e14:	607b      	str	r3, [r7, #4]
 8002e16:	e008      	b.n	8002e2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e18:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <xTaskGetSchedulerState+0x38>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d102      	bne.n	8002e26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002e20:	2302      	movs	r3, #2
 8002e22:	607b      	str	r3, [r7, #4]
 8002e24:	e001      	b.n	8002e2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002e26:	2300      	movs	r3, #0
 8002e28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002e2a:	687b      	ldr	r3, [r7, #4]
	}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	20000cf8 	.word	0x20000cf8
 8002e3c:	20000d14 	.word	0x20000d14

08002e40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d056      	beq.n	8002f04 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002e56:	4b2e      	ldr	r3, [pc, #184]	; (8002f10 <xTaskPriorityDisinherit+0xd0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d00a      	beq.n	8002e76 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8002e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	60fb      	str	r3, [r7, #12]
}
 8002e72:	bf00      	nop
 8002e74:	e7fe      	b.n	8002e74 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10a      	bne.n	8002e94 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8002e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e82:	f383 8811 	msr	BASEPRI, r3
 8002e86:	f3bf 8f6f 	isb	sy
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	60bb      	str	r3, [r7, #8]
}
 8002e90:	bf00      	nop
 8002e92:	e7fe      	b.n	8002e92 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e98:	1e5a      	subs	r2, r3, #1
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d02c      	beq.n	8002f04 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d128      	bne.n	8002f04 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fe fc46 	bl	8001748 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed4:	4b0f      	ldr	r3, [pc, #60]	; (8002f14 <xTaskPriorityDisinherit+0xd4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d903      	bls.n	8002ee4 <xTaskPriorityDisinherit+0xa4>
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	4a0c      	ldr	r2, [pc, #48]	; (8002f14 <xTaskPriorityDisinherit+0xd4>)
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee8:	4613      	mov	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4a09      	ldr	r2, [pc, #36]	; (8002f18 <xTaskPriorityDisinherit+0xd8>)
 8002ef2:	441a      	add	r2, r3
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	3304      	adds	r3, #4
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4610      	mov	r0, r2
 8002efc:	f7fe fbc7 	bl	800168e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002f00:	2301      	movs	r3, #1
 8002f02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002f04:	697b      	ldr	r3, [r7, #20]
	}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000818 	.word	0x20000818
 8002f14:	20000cf4 	.word	0x20000cf4
 8002f18:	2000081c 	.word	0x2000081c

08002f1c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002f26:	4b21      	ldr	r3, [pc, #132]	; (8002fac <prvAddCurrentTaskToDelayedList+0x90>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f2c:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	3304      	adds	r3, #4
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fe fc08 	bl	8001748 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3e:	d10a      	bne.n	8002f56 <prvAddCurrentTaskToDelayedList+0x3a>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d007      	beq.n	8002f56 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f46:	4b1a      	ldr	r3, [pc, #104]	; (8002fb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4819      	ldr	r0, [pc, #100]	; (8002fb4 <prvAddCurrentTaskToDelayedList+0x98>)
 8002f50:	f7fe fb9d 	bl	800168e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002f54:	e026      	b.n	8002fa4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002f5e:	4b14      	ldr	r3, [pc, #80]	; (8002fb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d209      	bcs.n	8002f82 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f6e:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	3304      	adds	r3, #4
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	f7fe fbab 	bl	80016d6 <vListInsert>
}
 8002f80:	e010      	b.n	8002fa4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f82:	4b0e      	ldr	r3, [pc, #56]	; (8002fbc <prvAddCurrentTaskToDelayedList+0xa0>)
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4610      	mov	r0, r2
 8002f90:	f7fe fba1 	bl	80016d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002f94:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d202      	bcs.n	8002fa4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002f9e:	4a08      	ldr	r2, [pc, #32]	; (8002fc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	6013      	str	r3, [r2, #0]
}
 8002fa4:	bf00      	nop
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	20000cf0 	.word	0x20000cf0
 8002fb0:	20000818 	.word	0x20000818
 8002fb4:	20000cd8 	.word	0x20000cd8
 8002fb8:	20000ca8 	.word	0x20000ca8
 8002fbc:	20000ca4 	.word	0x20000ca4
 8002fc0:	20000d0c 	.word	0x20000d0c

08002fc4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08a      	sub	sp, #40	; 0x28
 8002fc8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002fce:	f000 fb07 	bl	80035e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002fd2:	4b1c      	ldr	r3, [pc, #112]	; (8003044 <xTimerCreateTimerTask+0x80>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d021      	beq.n	800301e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002fe2:	1d3a      	adds	r2, r7, #4
 8002fe4:	f107 0108 	add.w	r1, r7, #8
 8002fe8:	f107 030c 	add.w	r3, r7, #12
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7fe fb07 	bl	8001600 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	9202      	str	r2, [sp, #8]
 8002ffa:	9301      	str	r3, [sp, #4]
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	2300      	movs	r3, #0
 8003002:	460a      	mov	r2, r1
 8003004:	4910      	ldr	r1, [pc, #64]	; (8003048 <xTimerCreateTimerTask+0x84>)
 8003006:	4811      	ldr	r0, [pc, #68]	; (800304c <xTimerCreateTimerTask+0x88>)
 8003008:	f7ff f8b4 	bl	8002174 <xTaskCreateStatic>
 800300c:	4603      	mov	r3, r0
 800300e:	4a10      	ldr	r2, [pc, #64]	; (8003050 <xTimerCreateTimerTask+0x8c>)
 8003010:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003012:	4b0f      	ldr	r3, [pc, #60]	; (8003050 <xTimerCreateTimerTask+0x8c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800301a:	2301      	movs	r3, #1
 800301c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10a      	bne.n	800303a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	613b      	str	r3, [r7, #16]
}
 8003036:	bf00      	nop
 8003038:	e7fe      	b.n	8003038 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800303a:	697b      	ldr	r3, [r7, #20]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20000d48 	.word	0x20000d48
 8003048:	080040cc 	.word	0x080040cc
 800304c:	08003189 	.word	0x08003189
 8003050:	20000d4c 	.word	0x20000d4c

08003054 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08a      	sub	sp, #40	; 0x28
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003062:	2300      	movs	r3, #0
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10a      	bne.n	8003082 <xTimerGenericCommand+0x2e>
	__asm volatile
 800306c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003070:	f383 8811 	msr	BASEPRI, r3
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	623b      	str	r3, [r7, #32]
}
 800307e:	bf00      	nop
 8003080:	e7fe      	b.n	8003080 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003082:	4b1a      	ldr	r3, [pc, #104]	; (80030ec <xTimerGenericCommand+0x98>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d02a      	beq.n	80030e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	2b05      	cmp	r3, #5
 800309a:	dc18      	bgt.n	80030ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800309c:	f7ff feb2 	bl	8002e04 <xTaskGetSchedulerState>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d109      	bne.n	80030ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80030a6:	4b11      	ldr	r3, [pc, #68]	; (80030ec <xTimerGenericCommand+0x98>)
 80030a8:	6818      	ldr	r0, [r3, #0]
 80030aa:	f107 0110 	add.w	r1, r7, #16
 80030ae:	2300      	movs	r3, #0
 80030b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030b2:	f7fe fc77 	bl	80019a4 <xQueueGenericSend>
 80030b6:	6278      	str	r0, [r7, #36]	; 0x24
 80030b8:	e012      	b.n	80030e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80030ba:	4b0c      	ldr	r3, [pc, #48]	; (80030ec <xTimerGenericCommand+0x98>)
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	f107 0110 	add.w	r1, r7, #16
 80030c2:	2300      	movs	r3, #0
 80030c4:	2200      	movs	r2, #0
 80030c6:	f7fe fc6d 	bl	80019a4 <xQueueGenericSend>
 80030ca:	6278      	str	r0, [r7, #36]	; 0x24
 80030cc:	e008      	b.n	80030e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80030ce:	4b07      	ldr	r3, [pc, #28]	; (80030ec <xTimerGenericCommand+0x98>)
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	f107 0110 	add.w	r1, r7, #16
 80030d6:	2300      	movs	r3, #0
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	f7fe fd61 	bl	8001ba0 <xQueueGenericSendFromISR>
 80030de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80030e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3728      	adds	r7, #40	; 0x28
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20000d48 	.word	0x20000d48

080030f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b088      	sub	sp, #32
 80030f4:	af02      	add	r7, sp, #8
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030fa:	4b22      	ldr	r3, [pc, #136]	; (8003184 <prvProcessExpiredTimer+0x94>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	3304      	adds	r3, #4
 8003108:	4618      	mov	r0, r3
 800310a:	f7fe fb1d 	bl	8001748 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d022      	beq.n	8003162 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	699a      	ldr	r2, [r3, #24]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	18d1      	adds	r1, r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	6978      	ldr	r0, [r7, #20]
 800312a:	f000 f8d1 	bl	80032d0 <prvInsertTimerInActiveList>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d01f      	beq.n	8003174 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003134:	2300      	movs	r3, #0
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	2300      	movs	r3, #0
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	2100      	movs	r1, #0
 800313e:	6978      	ldr	r0, [r7, #20]
 8003140:	f7ff ff88 	bl	8003054 <xTimerGenericCommand>
 8003144:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d113      	bne.n	8003174 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800314c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003150:	f383 8811 	msr	BASEPRI, r3
 8003154:	f3bf 8f6f 	isb	sy
 8003158:	f3bf 8f4f 	dsb	sy
 800315c:	60fb      	str	r3, [r7, #12]
}
 800315e:	bf00      	nop
 8003160:	e7fe      	b.n	8003160 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003168:	f023 0301 	bic.w	r3, r3, #1
 800316c:	b2da      	uxtb	r2, r3
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	6978      	ldr	r0, [r7, #20]
 800317a:	4798      	blx	r3
}
 800317c:	bf00      	nop
 800317e:	3718      	adds	r7, #24
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	20000d40 	.word	0x20000d40

08003188 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003190:	f107 0308 	add.w	r3, r7, #8
 8003194:	4618      	mov	r0, r3
 8003196:	f000 f857 	bl	8003248 <prvGetNextExpireTime>
 800319a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	4619      	mov	r1, r3
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 f803 	bl	80031ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80031a6:	f000 f8d5 	bl	8003354 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80031aa:	e7f1      	b.n	8003190 <prvTimerTask+0x8>

080031ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80031b6:	f7ff fa39 	bl	800262c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80031ba:	f107 0308 	add.w	r3, r7, #8
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 f866 	bl	8003290 <prvSampleTimeNow>
 80031c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d130      	bne.n	800322e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10a      	bne.n	80031e8 <prvProcessTimerOrBlockTask+0x3c>
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d806      	bhi.n	80031e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80031da:	f7ff fa35 	bl	8002648 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80031de:	68f9      	ldr	r1, [r7, #12]
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff ff85 	bl	80030f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80031e6:	e024      	b.n	8003232 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d008      	beq.n	8003200 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80031ee:	4b13      	ldr	r3, [pc, #76]	; (800323c <prvProcessTimerOrBlockTask+0x90>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <prvProcessTimerOrBlockTask+0x50>
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <prvProcessTimerOrBlockTask+0x52>
 80031fc:	2300      	movs	r3, #0
 80031fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003200:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <prvProcessTimerOrBlockTask+0x94>)
 8003202:	6818      	ldr	r0, [r3, #0]
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	4619      	mov	r1, r3
 800320e:	f7fe ff7d 	bl	800210c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003212:	f7ff fa19 	bl	8002648 <xTaskResumeAll>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10a      	bne.n	8003232 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800321c:	4b09      	ldr	r3, [pc, #36]	; (8003244 <prvProcessTimerOrBlockTask+0x98>)
 800321e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	f3bf 8f6f 	isb	sy
}
 800322c:	e001      	b.n	8003232 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800322e:	f7ff fa0b 	bl	8002648 <xTaskResumeAll>
}
 8003232:	bf00      	nop
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20000d44 	.word	0x20000d44
 8003240:	20000d48 	.word	0x20000d48
 8003244:	e000ed04 	.word	0xe000ed04

08003248 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003250:	4b0e      	ldr	r3, [pc, #56]	; (800328c <prvGetNextExpireTime+0x44>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <prvGetNextExpireTime+0x16>
 800325a:	2201      	movs	r2, #1
 800325c:	e000      	b.n	8003260 <prvGetNextExpireTime+0x18>
 800325e:	2200      	movs	r2, #0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d105      	bne.n	8003278 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800326c:	4b07      	ldr	r3, [pc, #28]	; (800328c <prvGetNextExpireTime+0x44>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	e001      	b.n	800327c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800327c:	68fb      	ldr	r3, [r7, #12]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	20000d40 	.word	0x20000d40

08003290 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003298:	f7ff fa74 	bl	8002784 <xTaskGetTickCount>
 800329c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800329e:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <prvSampleTimeNow+0x3c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d205      	bcs.n	80032b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80032a8:	f000 f936 	bl	8003518 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	e002      	b.n	80032ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80032ba:	4a04      	ldr	r2, [pc, #16]	; (80032cc <prvSampleTimeNow+0x3c>)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80032c0:	68fb      	ldr	r3, [r7, #12]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	20000d50 	.word	0x20000d50

080032d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
 80032dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d812      	bhi.n	800331c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	1ad2      	subs	r2, r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	429a      	cmp	r2, r3
 8003302:	d302      	bcc.n	800330a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003304:	2301      	movs	r3, #1
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	e01b      	b.n	8003342 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800330a:	4b10      	ldr	r3, [pc, #64]	; (800334c <prvInsertTimerInActiveList+0x7c>)
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	3304      	adds	r3, #4
 8003312:	4619      	mov	r1, r3
 8003314:	4610      	mov	r0, r2
 8003316:	f7fe f9de 	bl	80016d6 <vListInsert>
 800331a:	e012      	b.n	8003342 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d206      	bcs.n	8003332 <prvInsertTimerInActiveList+0x62>
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d302      	bcc.n	8003332 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800332c:	2301      	movs	r3, #1
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	e007      	b.n	8003342 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003332:	4b07      	ldr	r3, [pc, #28]	; (8003350 <prvInsertTimerInActiveList+0x80>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	3304      	adds	r3, #4
 800333a:	4619      	mov	r1, r3
 800333c:	4610      	mov	r0, r2
 800333e:	f7fe f9ca 	bl	80016d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003342:	697b      	ldr	r3, [r7, #20]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	20000d44 	.word	0x20000d44
 8003350:	20000d40 	.word	0x20000d40

08003354 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08e      	sub	sp, #56	; 0x38
 8003358:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800335a:	e0ca      	b.n	80034f2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	da18      	bge.n	8003394 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003362:	1d3b      	adds	r3, r7, #4
 8003364:	3304      	adds	r3, #4
 8003366:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10a      	bne.n	8003384 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800336e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003372:	f383 8811 	msr	BASEPRI, r3
 8003376:	f3bf 8f6f 	isb	sy
 800337a:	f3bf 8f4f 	dsb	sy
 800337e:	61fb      	str	r3, [r7, #28]
}
 8003380:	bf00      	nop
 8003382:	e7fe      	b.n	8003382 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800338a:	6850      	ldr	r0, [r2, #4]
 800338c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800338e:	6892      	ldr	r2, [r2, #8]
 8003390:	4611      	mov	r1, r2
 8003392:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	f2c0 80ab 	blt.w	80034f2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80033a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d004      	beq.n	80033b2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80033a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033aa:	3304      	adds	r3, #4
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7fe f9cb 	bl	8001748 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80033b2:	463b      	mov	r3, r7
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff ff6b 	bl	8003290 <prvSampleTimeNow>
 80033ba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b09      	cmp	r3, #9
 80033c0:	f200 8096 	bhi.w	80034f0 <prvProcessReceivedCommands+0x19c>
 80033c4:	a201      	add	r2, pc, #4	; (adr r2, 80033cc <prvProcessReceivedCommands+0x78>)
 80033c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ca:	bf00      	nop
 80033cc:	080033f5 	.word	0x080033f5
 80033d0:	080033f5 	.word	0x080033f5
 80033d4:	080033f5 	.word	0x080033f5
 80033d8:	08003469 	.word	0x08003469
 80033dc:	0800347d 	.word	0x0800347d
 80033e0:	080034c7 	.word	0x080034c7
 80033e4:	080033f5 	.word	0x080033f5
 80033e8:	080033f5 	.word	0x080033f5
 80033ec:	08003469 	.word	0x08003469
 80033f0:	0800347d 	.word	0x0800347d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80033f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033fa:	f043 0301 	orr.w	r3, r3, #1
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003402:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	18d1      	adds	r1, r2, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003414:	f7ff ff5c 	bl	80032d0 <prvInsertTimerInActiveList>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d069      	beq.n	80034f2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800341e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003424:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	d05e      	beq.n	80034f2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	441a      	add	r2, r3
 800343c:	2300      	movs	r3, #0
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	2300      	movs	r3, #0
 8003442:	2100      	movs	r1, #0
 8003444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003446:	f7ff fe05 	bl	8003054 <xTimerGenericCommand>
 800344a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d14f      	bne.n	80034f2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003456:	f383 8811 	msr	BASEPRI, r3
 800345a:	f3bf 8f6f 	isb	sy
 800345e:	f3bf 8f4f 	dsb	sy
 8003462:	61bb      	str	r3, [r7, #24]
}
 8003464:	bf00      	nop
 8003466:	e7fe      	b.n	8003466 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800346e:	f023 0301 	bic.w	r3, r3, #1
 8003472:	b2da      	uxtb	r2, r3
 8003474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003476:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800347a:	e03a      	b.n	80034f2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800347c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003482:	f043 0301 	orr.w	r3, r3, #1
 8003486:	b2da      	uxtb	r2, r3
 8003488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003492:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10a      	bne.n	80034b2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800349c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a0:	f383 8811 	msr	BASEPRI, r3
 80034a4:	f3bf 8f6f 	isb	sy
 80034a8:	f3bf 8f4f 	dsb	sy
 80034ac:	617b      	str	r3, [r7, #20]
}
 80034ae:	bf00      	nop
 80034b0:	e7fe      	b.n	80034b0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80034b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	18d1      	adds	r1, r2, r3
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034c0:	f7ff ff06 	bl	80032d0 <prvInsertTimerInActiveList>
					break;
 80034c4:	e015      	b.n	80034f2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80034c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d103      	bne.n	80034dc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80034d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034d6:	f000 fbdb 	bl	8003c90 <vPortFree>
 80034da:	e00a      	b.n	80034f2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80034dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034e2:	f023 0301 	bic.w	r3, r3, #1
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80034ee:	e000      	b.n	80034f2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80034f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80034f2:	4b08      	ldr	r3, [pc, #32]	; (8003514 <prvProcessReceivedCommands+0x1c0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	1d39      	adds	r1, r7, #4
 80034f8:	2200      	movs	r2, #0
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fe fbec 	bl	8001cd8 <xQueueReceive>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	f47f af2a 	bne.w	800335c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003508:	bf00      	nop
 800350a:	bf00      	nop
 800350c:	3730      	adds	r7, #48	; 0x30
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20000d48 	.word	0x20000d48

08003518 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800351e:	e048      	b.n	80035b2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003520:	4b2d      	ldr	r3, [pc, #180]	; (80035d8 <prvSwitchTimerLists+0xc0>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800352a:	4b2b      	ldr	r3, [pc, #172]	; (80035d8 <prvSwitchTimerLists+0xc0>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	3304      	adds	r3, #4
 8003538:	4618      	mov	r0, r3
 800353a:	f7fe f905 	bl	8001748 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800354c:	f003 0304 	and.w	r3, r3, #4
 8003550:	2b00      	cmp	r3, #0
 8003552:	d02e      	beq.n	80035b2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	4413      	add	r3, r2
 800355c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	429a      	cmp	r2, r3
 8003564:	d90e      	bls.n	8003584 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003572:	4b19      	ldr	r3, [pc, #100]	; (80035d8 <prvSwitchTimerLists+0xc0>)
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	3304      	adds	r3, #4
 800357a:	4619      	mov	r1, r3
 800357c:	4610      	mov	r0, r2
 800357e:	f7fe f8aa 	bl	80016d6 <vListInsert>
 8003582:	e016      	b.n	80035b2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003584:	2300      	movs	r3, #0
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	2300      	movs	r3, #0
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	2100      	movs	r1, #0
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f7ff fd60 	bl	8003054 <xTimerGenericCommand>
 8003594:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10a      	bne.n	80035b2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800359c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a0:	f383 8811 	msr	BASEPRI, r3
 80035a4:	f3bf 8f6f 	isb	sy
 80035a8:	f3bf 8f4f 	dsb	sy
 80035ac:	603b      	str	r3, [r7, #0]
}
 80035ae:	bf00      	nop
 80035b0:	e7fe      	b.n	80035b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80035b2:	4b09      	ldr	r3, [pc, #36]	; (80035d8 <prvSwitchTimerLists+0xc0>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1b1      	bne.n	8003520 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80035bc:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <prvSwitchTimerLists+0xc0>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80035c2:	4b06      	ldr	r3, [pc, #24]	; (80035dc <prvSwitchTimerLists+0xc4>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a04      	ldr	r2, [pc, #16]	; (80035d8 <prvSwitchTimerLists+0xc0>)
 80035c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80035ca:	4a04      	ldr	r2, [pc, #16]	; (80035dc <prvSwitchTimerLists+0xc4>)
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	6013      	str	r3, [r2, #0]
}
 80035d0:	bf00      	nop
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	20000d40 	.word	0x20000d40
 80035dc:	20000d44 	.word	0x20000d44

080035e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80035e6:	f000 f965 	bl	80038b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80035ea:	4b15      	ldr	r3, [pc, #84]	; (8003640 <prvCheckForValidListAndQueue+0x60>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d120      	bne.n	8003634 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80035f2:	4814      	ldr	r0, [pc, #80]	; (8003644 <prvCheckForValidListAndQueue+0x64>)
 80035f4:	f7fe f81e 	bl	8001634 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80035f8:	4813      	ldr	r0, [pc, #76]	; (8003648 <prvCheckForValidListAndQueue+0x68>)
 80035fa:	f7fe f81b 	bl	8001634 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80035fe:	4b13      	ldr	r3, [pc, #76]	; (800364c <prvCheckForValidListAndQueue+0x6c>)
 8003600:	4a10      	ldr	r2, [pc, #64]	; (8003644 <prvCheckForValidListAndQueue+0x64>)
 8003602:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003604:	4b12      	ldr	r3, [pc, #72]	; (8003650 <prvCheckForValidListAndQueue+0x70>)
 8003606:	4a10      	ldr	r2, [pc, #64]	; (8003648 <prvCheckForValidListAndQueue+0x68>)
 8003608:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800360a:	2300      	movs	r3, #0
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	4b11      	ldr	r3, [pc, #68]	; (8003654 <prvCheckForValidListAndQueue+0x74>)
 8003610:	4a11      	ldr	r2, [pc, #68]	; (8003658 <prvCheckForValidListAndQueue+0x78>)
 8003612:	2110      	movs	r1, #16
 8003614:	200a      	movs	r0, #10
 8003616:	f7fe f929 	bl	800186c <xQueueGenericCreateStatic>
 800361a:	4603      	mov	r3, r0
 800361c:	4a08      	ldr	r2, [pc, #32]	; (8003640 <prvCheckForValidListAndQueue+0x60>)
 800361e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003620:	4b07      	ldr	r3, [pc, #28]	; (8003640 <prvCheckForValidListAndQueue+0x60>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003628:	4b05      	ldr	r3, [pc, #20]	; (8003640 <prvCheckForValidListAndQueue+0x60>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	490b      	ldr	r1, [pc, #44]	; (800365c <prvCheckForValidListAndQueue+0x7c>)
 800362e:	4618      	mov	r0, r3
 8003630:	f7fe fd42 	bl	80020b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003634:	f000 f96e 	bl	8003914 <vPortExitCritical>
}
 8003638:	bf00      	nop
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	20000d48 	.word	0x20000d48
 8003644:	20000d18 	.word	0x20000d18
 8003648:	20000d2c 	.word	0x20000d2c
 800364c:	20000d40 	.word	0x20000d40
 8003650:	20000d44 	.word	0x20000d44
 8003654:	20000df4 	.word	0x20000df4
 8003658:	20000d54 	.word	0x20000d54
 800365c:	080040d4 	.word	0x080040d4

08003660 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	3b04      	subs	r3, #4
 8003670:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003678:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	3b04      	subs	r3, #4
 800367e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f023 0201 	bic.w	r2, r3, #1
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	3b04      	subs	r3, #4
 800368e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003690:	4a0c      	ldr	r2, [pc, #48]	; (80036c4 <pxPortInitialiseStack+0x64>)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	3b14      	subs	r3, #20
 800369a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	3b04      	subs	r3, #4
 80036a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f06f 0202 	mvn.w	r2, #2
 80036ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	3b20      	subs	r3, #32
 80036b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80036b6:	68fb      	ldr	r3, [r7, #12]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	080036c9 	.word	0x080036c9

080036c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80036ce:	2300      	movs	r3, #0
 80036d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80036d2:	4b12      	ldr	r3, [pc, #72]	; (800371c <prvTaskExitError+0x54>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036da:	d00a      	beq.n	80036f2 <prvTaskExitError+0x2a>
	__asm volatile
 80036dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e0:	f383 8811 	msr	BASEPRI, r3
 80036e4:	f3bf 8f6f 	isb	sy
 80036e8:	f3bf 8f4f 	dsb	sy
 80036ec:	60fb      	str	r3, [r7, #12]
}
 80036ee:	bf00      	nop
 80036f0:	e7fe      	b.n	80036f0 <prvTaskExitError+0x28>
	__asm volatile
 80036f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f6:	f383 8811 	msr	BASEPRI, r3
 80036fa:	f3bf 8f6f 	isb	sy
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	60bb      	str	r3, [r7, #8]
}
 8003704:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003706:	bf00      	nop
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0fc      	beq.n	8003708 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800370e:	bf00      	nop
 8003710:	bf00      	nop
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	2000000c 	.word	0x2000000c

08003720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003720:	4b07      	ldr	r3, [pc, #28]	; (8003740 <pxCurrentTCBConst2>)
 8003722:	6819      	ldr	r1, [r3, #0]
 8003724:	6808      	ldr	r0, [r1, #0]
 8003726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800372a:	f380 8809 	msr	PSP, r0
 800372e:	f3bf 8f6f 	isb	sy
 8003732:	f04f 0000 	mov.w	r0, #0
 8003736:	f380 8811 	msr	BASEPRI, r0
 800373a:	4770      	bx	lr
 800373c:	f3af 8000 	nop.w

08003740 <pxCurrentTCBConst2>:
 8003740:	20000818 	.word	0x20000818
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003744:	bf00      	nop
 8003746:	bf00      	nop

08003748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003748:	4808      	ldr	r0, [pc, #32]	; (800376c <prvPortStartFirstTask+0x24>)
 800374a:	6800      	ldr	r0, [r0, #0]
 800374c:	6800      	ldr	r0, [r0, #0]
 800374e:	f380 8808 	msr	MSP, r0
 8003752:	f04f 0000 	mov.w	r0, #0
 8003756:	f380 8814 	msr	CONTROL, r0
 800375a:	b662      	cpsie	i
 800375c:	b661      	cpsie	f
 800375e:	f3bf 8f4f 	dsb	sy
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	df00      	svc	0
 8003768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800376a:	bf00      	nop
 800376c:	e000ed08 	.word	0xe000ed08

08003770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003776:	4b46      	ldr	r3, [pc, #280]	; (8003890 <xPortStartScheduler+0x120>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a46      	ldr	r2, [pc, #280]	; (8003894 <xPortStartScheduler+0x124>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d10a      	bne.n	8003796 <xPortStartScheduler+0x26>
	__asm volatile
 8003780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	613b      	str	r3, [r7, #16]
}
 8003792:	bf00      	nop
 8003794:	e7fe      	b.n	8003794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003796:	4b3e      	ldr	r3, [pc, #248]	; (8003890 <xPortStartScheduler+0x120>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a3f      	ldr	r2, [pc, #252]	; (8003898 <xPortStartScheduler+0x128>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d10a      	bne.n	80037b6 <xPortStartScheduler+0x46>
	__asm volatile
 80037a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a4:	f383 8811 	msr	BASEPRI, r3
 80037a8:	f3bf 8f6f 	isb	sy
 80037ac:	f3bf 8f4f 	dsb	sy
 80037b0:	60fb      	str	r3, [r7, #12]
}
 80037b2:	bf00      	nop
 80037b4:	e7fe      	b.n	80037b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80037b6:	4b39      	ldr	r3, [pc, #228]	; (800389c <xPortStartScheduler+0x12c>)
 80037b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	22ff      	movs	r2, #255	; 0xff
 80037c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80037d0:	78fb      	ldrb	r3, [r7, #3]
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	4b31      	ldr	r3, [pc, #196]	; (80038a0 <xPortStartScheduler+0x130>)
 80037dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80037de:	4b31      	ldr	r3, [pc, #196]	; (80038a4 <xPortStartScheduler+0x134>)
 80037e0:	2207      	movs	r2, #7
 80037e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037e4:	e009      	b.n	80037fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80037e6:	4b2f      	ldr	r3, [pc, #188]	; (80038a4 <xPortStartScheduler+0x134>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	4a2d      	ldr	r2, [pc, #180]	; (80038a4 <xPortStartScheduler+0x134>)
 80037ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80037f0:	78fb      	ldrb	r3, [r7, #3]
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037fa:	78fb      	ldrb	r3, [r7, #3]
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003802:	2b80      	cmp	r3, #128	; 0x80
 8003804:	d0ef      	beq.n	80037e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003806:	4b27      	ldr	r3, [pc, #156]	; (80038a4 <xPortStartScheduler+0x134>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f1c3 0307 	rsb	r3, r3, #7
 800380e:	2b04      	cmp	r3, #4
 8003810:	d00a      	beq.n	8003828 <xPortStartScheduler+0xb8>
	__asm volatile
 8003812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003816:	f383 8811 	msr	BASEPRI, r3
 800381a:	f3bf 8f6f 	isb	sy
 800381e:	f3bf 8f4f 	dsb	sy
 8003822:	60bb      	str	r3, [r7, #8]
}
 8003824:	bf00      	nop
 8003826:	e7fe      	b.n	8003826 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003828:	4b1e      	ldr	r3, [pc, #120]	; (80038a4 <xPortStartScheduler+0x134>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	021b      	lsls	r3, r3, #8
 800382e:	4a1d      	ldr	r2, [pc, #116]	; (80038a4 <xPortStartScheduler+0x134>)
 8003830:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003832:	4b1c      	ldr	r3, [pc, #112]	; (80038a4 <xPortStartScheduler+0x134>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800383a:	4a1a      	ldr	r2, [pc, #104]	; (80038a4 <xPortStartScheduler+0x134>)
 800383c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	b2da      	uxtb	r2, r3
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003846:	4b18      	ldr	r3, [pc, #96]	; (80038a8 <xPortStartScheduler+0x138>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a17      	ldr	r2, [pc, #92]	; (80038a8 <xPortStartScheduler+0x138>)
 800384c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003850:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003852:	4b15      	ldr	r3, [pc, #84]	; (80038a8 <xPortStartScheduler+0x138>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a14      	ldr	r2, [pc, #80]	; (80038a8 <xPortStartScheduler+0x138>)
 8003858:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800385c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800385e:	f000 f8dd 	bl	8003a1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003862:	4b12      	ldr	r3, [pc, #72]	; (80038ac <xPortStartScheduler+0x13c>)
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003868:	f000 f8fc 	bl	8003a64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800386c:	4b10      	ldr	r3, [pc, #64]	; (80038b0 <xPortStartScheduler+0x140>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a0f      	ldr	r2, [pc, #60]	; (80038b0 <xPortStartScheduler+0x140>)
 8003872:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003876:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003878:	f7ff ff66 	bl	8003748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800387c:	f7ff f84c 	bl	8002918 <vTaskSwitchContext>
	prvTaskExitError();
 8003880:	f7ff ff22 	bl	80036c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	e000ed00 	.word	0xe000ed00
 8003894:	410fc271 	.word	0x410fc271
 8003898:	410fc270 	.word	0x410fc270
 800389c:	e000e400 	.word	0xe000e400
 80038a0:	20000e44 	.word	0x20000e44
 80038a4:	20000e48 	.word	0x20000e48
 80038a8:	e000ed20 	.word	0xe000ed20
 80038ac:	2000000c 	.word	0x2000000c
 80038b0:	e000ef34 	.word	0xe000ef34

080038b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
	__asm volatile
 80038ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038be:	f383 8811 	msr	BASEPRI, r3
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	607b      	str	r3, [r7, #4]
}
 80038cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80038ce:	4b0f      	ldr	r3, [pc, #60]	; (800390c <vPortEnterCritical+0x58>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3301      	adds	r3, #1
 80038d4:	4a0d      	ldr	r2, [pc, #52]	; (800390c <vPortEnterCritical+0x58>)
 80038d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80038d8:	4b0c      	ldr	r3, [pc, #48]	; (800390c <vPortEnterCritical+0x58>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d10f      	bne.n	8003900 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80038e0:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <vPortEnterCritical+0x5c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <vPortEnterCritical+0x4c>
	__asm volatile
 80038ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ee:	f383 8811 	msr	BASEPRI, r3
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	603b      	str	r3, [r7, #0]
}
 80038fc:	bf00      	nop
 80038fe:	e7fe      	b.n	80038fe <vPortEnterCritical+0x4a>
	}
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	2000000c 	.word	0x2000000c
 8003910:	e000ed04 	.word	0xe000ed04

08003914 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800391a:	4b12      	ldr	r3, [pc, #72]	; (8003964 <vPortExitCritical+0x50>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10a      	bne.n	8003938 <vPortExitCritical+0x24>
	__asm volatile
 8003922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	607b      	str	r3, [r7, #4]
}
 8003934:	bf00      	nop
 8003936:	e7fe      	b.n	8003936 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003938:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <vPortExitCritical+0x50>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3b01      	subs	r3, #1
 800393e:	4a09      	ldr	r2, [pc, #36]	; (8003964 <vPortExitCritical+0x50>)
 8003940:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003942:	4b08      	ldr	r3, [pc, #32]	; (8003964 <vPortExitCritical+0x50>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d105      	bne.n	8003956 <vPortExitCritical+0x42>
 800394a:	2300      	movs	r3, #0
 800394c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	f383 8811 	msr	BASEPRI, r3
}
 8003954:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	2000000c 	.word	0x2000000c
	...

08003970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003970:	f3ef 8009 	mrs	r0, PSP
 8003974:	f3bf 8f6f 	isb	sy
 8003978:	4b15      	ldr	r3, [pc, #84]	; (80039d0 <pxCurrentTCBConst>)
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	f01e 0f10 	tst.w	lr, #16
 8003980:	bf08      	it	eq
 8003982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800398a:	6010      	str	r0, [r2, #0]
 800398c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003990:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003994:	f380 8811 	msr	BASEPRI, r0
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f7fe ffba 	bl	8002918 <vTaskSwitchContext>
 80039a4:	f04f 0000 	mov.w	r0, #0
 80039a8:	f380 8811 	msr	BASEPRI, r0
 80039ac:	bc09      	pop	{r0, r3}
 80039ae:	6819      	ldr	r1, [r3, #0]
 80039b0:	6808      	ldr	r0, [r1, #0]
 80039b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039b6:	f01e 0f10 	tst.w	lr, #16
 80039ba:	bf08      	it	eq
 80039bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80039c0:	f380 8809 	msr	PSP, r0
 80039c4:	f3bf 8f6f 	isb	sy
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	f3af 8000 	nop.w

080039d0 <pxCurrentTCBConst>:
 80039d0:	20000818 	.word	0x20000818
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80039d4:	bf00      	nop
 80039d6:	bf00      	nop

080039d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
	__asm volatile
 80039de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e2:	f383 8811 	msr	BASEPRI, r3
 80039e6:	f3bf 8f6f 	isb	sy
 80039ea:	f3bf 8f4f 	dsb	sy
 80039ee:	607b      	str	r3, [r7, #4]
}
 80039f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80039f2:	f7fe fed7 	bl	80027a4 <xTaskIncrementTick>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80039fc:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <xPortSysTickHandler+0x40>)
 80039fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	2300      	movs	r3, #0
 8003a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	f383 8811 	msr	BASEPRI, r3
}
 8003a0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003a10:	bf00      	nop
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	e000ed04 	.word	0xe000ed04

08003a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003a20:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <vPortSetupTimerInterrupt+0x34>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003a26:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <vPortSetupTimerInterrupt+0x38>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003a2c:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <vPortSetupTimerInterrupt+0x3c>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a0a      	ldr	r2, [pc, #40]	; (8003a5c <vPortSetupTimerInterrupt+0x40>)
 8003a32:	fba2 2303 	umull	r2, r3, r2, r3
 8003a36:	099b      	lsrs	r3, r3, #6
 8003a38:	4a09      	ldr	r2, [pc, #36]	; (8003a60 <vPortSetupTimerInterrupt+0x44>)
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003a3e:	4b04      	ldr	r3, [pc, #16]	; (8003a50 <vPortSetupTimerInterrupt+0x34>)
 8003a40:	2207      	movs	r2, #7
 8003a42:	601a      	str	r2, [r3, #0]
}
 8003a44:	bf00      	nop
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	e000e010 	.word	0xe000e010
 8003a54:	e000e018 	.word	0xe000e018
 8003a58:	20000000 	.word	0x20000000
 8003a5c:	10624dd3 	.word	0x10624dd3
 8003a60:	e000e014 	.word	0xe000e014

08003a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003a64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003a74 <vPortEnableVFP+0x10>
 8003a68:	6801      	ldr	r1, [r0, #0]
 8003a6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003a6e:	6001      	str	r1, [r0, #0]
 8003a70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003a72:	bf00      	nop
 8003a74:	e000ed88 	.word	0xe000ed88

08003a78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003a7e:	f3ef 8305 	mrs	r3, IPSR
 8003a82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2b0f      	cmp	r3, #15
 8003a88:	d914      	bls.n	8003ab4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003a8a:	4a17      	ldr	r2, [pc, #92]	; (8003ae8 <vPortValidateInterruptPriority+0x70>)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4413      	add	r3, r2
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003a94:	4b15      	ldr	r3, [pc, #84]	; (8003aec <vPortValidateInterruptPriority+0x74>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	7afa      	ldrb	r2, [r7, #11]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d20a      	bcs.n	8003ab4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa2:	f383 8811 	msr	BASEPRI, r3
 8003aa6:	f3bf 8f6f 	isb	sy
 8003aaa:	f3bf 8f4f 	dsb	sy
 8003aae:	607b      	str	r3, [r7, #4]
}
 8003ab0:	bf00      	nop
 8003ab2:	e7fe      	b.n	8003ab2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003ab4:	4b0e      	ldr	r3, [pc, #56]	; (8003af0 <vPortValidateInterruptPriority+0x78>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003abc:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <vPortValidateInterruptPriority+0x7c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d90a      	bls.n	8003ada <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac8:	f383 8811 	msr	BASEPRI, r3
 8003acc:	f3bf 8f6f 	isb	sy
 8003ad0:	f3bf 8f4f 	dsb	sy
 8003ad4:	603b      	str	r3, [r7, #0]
}
 8003ad6:	bf00      	nop
 8003ad8:	e7fe      	b.n	8003ad8 <vPortValidateInterruptPriority+0x60>
	}
 8003ada:	bf00      	nop
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	e000e3f0 	.word	0xe000e3f0
 8003aec:	20000e44 	.word	0x20000e44
 8003af0:	e000ed0c 	.word	0xe000ed0c
 8003af4:	20000e48 	.word	0x20000e48

08003af8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08a      	sub	sp, #40	; 0x28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003b00:	2300      	movs	r3, #0
 8003b02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003b04:	f7fe fd92 	bl	800262c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003b08:	4b5b      	ldr	r3, [pc, #364]	; (8003c78 <pvPortMalloc+0x180>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d101      	bne.n	8003b14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003b10:	f000 f920 	bl	8003d54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003b14:	4b59      	ldr	r3, [pc, #356]	; (8003c7c <pvPortMalloc+0x184>)
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f040 8093 	bne.w	8003c48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d01d      	beq.n	8003b64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003b28:	2208      	movs	r2, #8
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d014      	beq.n	8003b64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f023 0307 	bic.w	r3, r3, #7
 8003b40:	3308      	adds	r3, #8
 8003b42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <pvPortMalloc+0x6c>
	__asm volatile
 8003b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b52:	f383 8811 	msr	BASEPRI, r3
 8003b56:	f3bf 8f6f 	isb	sy
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	617b      	str	r3, [r7, #20]
}
 8003b60:	bf00      	nop
 8003b62:	e7fe      	b.n	8003b62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d06e      	beq.n	8003c48 <pvPortMalloc+0x150>
 8003b6a:	4b45      	ldr	r3, [pc, #276]	; (8003c80 <pvPortMalloc+0x188>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d869      	bhi.n	8003c48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003b74:	4b43      	ldr	r3, [pc, #268]	; (8003c84 <pvPortMalloc+0x18c>)
 8003b76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003b78:	4b42      	ldr	r3, [pc, #264]	; (8003c84 <pvPortMalloc+0x18c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b7e:	e004      	b.n	8003b8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d903      	bls.n	8003b9c <pvPortMalloc+0xa4>
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1f1      	bne.n	8003b80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003b9c:	4b36      	ldr	r3, [pc, #216]	; (8003c78 <pvPortMalloc+0x180>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d050      	beq.n	8003c48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2208      	movs	r2, #8
 8003bac:	4413      	add	r3, r2
 8003bae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	1ad2      	subs	r2, r2, r3
 8003bc0:	2308      	movs	r3, #8
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d91f      	bls.n	8003c08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4413      	add	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00a      	beq.n	8003bf0 <pvPortMalloc+0xf8>
	__asm volatile
 8003bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bde:	f383 8811 	msr	BASEPRI, r3
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	613b      	str	r3, [r7, #16]
}
 8003bec:	bf00      	nop
 8003bee:	e7fe      	b.n	8003bee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	1ad2      	subs	r2, r2, r3
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003c02:	69b8      	ldr	r0, [r7, #24]
 8003c04:	f000 f908 	bl	8003e18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c08:	4b1d      	ldr	r3, [pc, #116]	; (8003c80 <pvPortMalloc+0x188>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	4a1b      	ldr	r2, [pc, #108]	; (8003c80 <pvPortMalloc+0x188>)
 8003c14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c16:	4b1a      	ldr	r3, [pc, #104]	; (8003c80 <pvPortMalloc+0x188>)
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	4b1b      	ldr	r3, [pc, #108]	; (8003c88 <pvPortMalloc+0x190>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d203      	bcs.n	8003c2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003c22:	4b17      	ldr	r3, [pc, #92]	; (8003c80 <pvPortMalloc+0x188>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a18      	ldr	r2, [pc, #96]	; (8003c88 <pvPortMalloc+0x190>)
 8003c28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	4b13      	ldr	r3, [pc, #76]	; (8003c7c <pvPortMalloc+0x184>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	431a      	orrs	r2, r3
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003c3e:	4b13      	ldr	r3, [pc, #76]	; (8003c8c <pvPortMalloc+0x194>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	3301      	adds	r3, #1
 8003c44:	4a11      	ldr	r2, [pc, #68]	; (8003c8c <pvPortMalloc+0x194>)
 8003c46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003c48:	f7fe fcfe 	bl	8002648 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <pvPortMalloc+0x174>
	__asm volatile
 8003c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	60fb      	str	r3, [r7, #12]
}
 8003c68:	bf00      	nop
 8003c6a:	e7fe      	b.n	8003c6a <pvPortMalloc+0x172>
	return pvReturn;
 8003c6c:	69fb      	ldr	r3, [r7, #28]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3728      	adds	r7, #40	; 0x28
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	20001a0c 	.word	0x20001a0c
 8003c7c:	20001a20 	.word	0x20001a20
 8003c80:	20001a10 	.word	0x20001a10
 8003c84:	20001a04 	.word	0x20001a04
 8003c88:	20001a14 	.word	0x20001a14
 8003c8c:	20001a18 	.word	0x20001a18

08003c90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d04d      	beq.n	8003d3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003ca2:	2308      	movs	r3, #8
 8003ca4:	425b      	negs	r3, r3
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	4413      	add	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	4b24      	ldr	r3, [pc, #144]	; (8003d48 <vPortFree+0xb8>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10a      	bne.n	8003cd4 <vPortFree+0x44>
	__asm volatile
 8003cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc2:	f383 8811 	msr	BASEPRI, r3
 8003cc6:	f3bf 8f6f 	isb	sy
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	60fb      	str	r3, [r7, #12]
}
 8003cd0:	bf00      	nop
 8003cd2:	e7fe      	b.n	8003cd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00a      	beq.n	8003cf2 <vPortFree+0x62>
	__asm volatile
 8003cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	60bb      	str	r3, [r7, #8]
}
 8003cee:	bf00      	nop
 8003cf0:	e7fe      	b.n	8003cf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	4b14      	ldr	r3, [pc, #80]	; (8003d48 <vPortFree+0xb8>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d01e      	beq.n	8003d3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d11a      	bne.n	8003d3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	4b0e      	ldr	r3, [pc, #56]	; (8003d48 <vPortFree+0xb8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	43db      	mvns	r3, r3
 8003d12:	401a      	ands	r2, r3
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003d18:	f7fe fc88 	bl	800262c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <vPortFree+0xbc>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4413      	add	r3, r2
 8003d26:	4a09      	ldr	r2, [pc, #36]	; (8003d4c <vPortFree+0xbc>)
 8003d28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003d2a:	6938      	ldr	r0, [r7, #16]
 8003d2c:	f000 f874 	bl	8003e18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003d30:	4b07      	ldr	r3, [pc, #28]	; (8003d50 <vPortFree+0xc0>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3301      	adds	r3, #1
 8003d36:	4a06      	ldr	r2, [pc, #24]	; (8003d50 <vPortFree+0xc0>)
 8003d38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003d3a:	f7fe fc85 	bl	8002648 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003d3e:	bf00      	nop
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	20001a20 	.word	0x20001a20
 8003d4c:	20001a10 	.word	0x20001a10
 8003d50:	20001a1c 	.word	0x20001a1c

08003d54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003d5a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003d5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003d60:	4b27      	ldr	r3, [pc, #156]	; (8003e00 <prvHeapInit+0xac>)
 8003d62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00c      	beq.n	8003d88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	3307      	adds	r3, #7
 8003d72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 0307 	bic.w	r3, r3, #7
 8003d7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	4a1f      	ldr	r2, [pc, #124]	; (8003e00 <prvHeapInit+0xac>)
 8003d84:	4413      	add	r3, r2
 8003d86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003d8c:	4a1d      	ldr	r2, [pc, #116]	; (8003e04 <prvHeapInit+0xb0>)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003d92:	4b1c      	ldr	r3, [pc, #112]	; (8003e04 <prvHeapInit+0xb0>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003da0:	2208      	movs	r2, #8
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	1a9b      	subs	r3, r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f023 0307 	bic.w	r3, r3, #7
 8003dae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4a15      	ldr	r2, [pc, #84]	; (8003e08 <prvHeapInit+0xb4>)
 8003db4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003db6:	4b14      	ldr	r3, [pc, #80]	; (8003e08 <prvHeapInit+0xb4>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003dbe:	4b12      	ldr	r3, [pc, #72]	; (8003e08 <prvHeapInit+0xb4>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	1ad2      	subs	r2, r2, r3
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003dd4:	4b0c      	ldr	r3, [pc, #48]	; (8003e08 <prvHeapInit+0xb4>)
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	4a0a      	ldr	r2, [pc, #40]	; (8003e0c <prvHeapInit+0xb8>)
 8003de2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	4a09      	ldr	r2, [pc, #36]	; (8003e10 <prvHeapInit+0xbc>)
 8003dea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003dec:	4b09      	ldr	r3, [pc, #36]	; (8003e14 <prvHeapInit+0xc0>)
 8003dee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003df2:	601a      	str	r2, [r3, #0]
}
 8003df4:	bf00      	nop
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	20000e4c 	.word	0x20000e4c
 8003e04:	20001a04 	.word	0x20001a04
 8003e08:	20001a0c 	.word	0x20001a0c
 8003e0c:	20001a14 	.word	0x20001a14
 8003e10:	20001a10 	.word	0x20001a10
 8003e14:	20001a20 	.word	0x20001a20

08003e18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003e20:	4b28      	ldr	r3, [pc, #160]	; (8003ec4 <prvInsertBlockIntoFreeList+0xac>)
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	e002      	b.n	8003e2c <prvInsertBlockIntoFreeList+0x14>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d8f7      	bhi.n	8003e26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	4413      	add	r3, r2
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d108      	bne.n	8003e5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	441a      	add	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	441a      	add	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d118      	bne.n	8003ea0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	4b15      	ldr	r3, [pc, #84]	; (8003ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d00d      	beq.n	8003e96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	441a      	add	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	e008      	b.n	8003ea8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003e96:	4b0c      	ldr	r3, [pc, #48]	; (8003ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	e003      	b.n	8003ea8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d002      	beq.n	8003eb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003eb6:	bf00      	nop
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	20001a04 	.word	0x20001a04
 8003ec8:	20001a0c 	.word	0x20001a0c

08003ecc <memset>:
 8003ecc:	4402      	add	r2, r0
 8003ece:	4603      	mov	r3, r0
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d100      	bne.n	8003ed6 <memset+0xa>
 8003ed4:	4770      	bx	lr
 8003ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eda:	e7f9      	b.n	8003ed0 <memset+0x4>

08003edc <_reclaim_reent>:
 8003edc:	4b29      	ldr	r3, [pc, #164]	; (8003f84 <_reclaim_reent+0xa8>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4283      	cmp	r3, r0
 8003ee2:	b570      	push	{r4, r5, r6, lr}
 8003ee4:	4604      	mov	r4, r0
 8003ee6:	d04b      	beq.n	8003f80 <_reclaim_reent+0xa4>
 8003ee8:	69c3      	ldr	r3, [r0, #28]
 8003eea:	b143      	cbz	r3, 8003efe <_reclaim_reent+0x22>
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d144      	bne.n	8003f7c <_reclaim_reent+0xa0>
 8003ef2:	69e3      	ldr	r3, [r4, #28]
 8003ef4:	6819      	ldr	r1, [r3, #0]
 8003ef6:	b111      	cbz	r1, 8003efe <_reclaim_reent+0x22>
 8003ef8:	4620      	mov	r0, r4
 8003efa:	f000 f879 	bl	8003ff0 <_free_r>
 8003efe:	6961      	ldr	r1, [r4, #20]
 8003f00:	b111      	cbz	r1, 8003f08 <_reclaim_reent+0x2c>
 8003f02:	4620      	mov	r0, r4
 8003f04:	f000 f874 	bl	8003ff0 <_free_r>
 8003f08:	69e1      	ldr	r1, [r4, #28]
 8003f0a:	b111      	cbz	r1, 8003f12 <_reclaim_reent+0x36>
 8003f0c:	4620      	mov	r0, r4
 8003f0e:	f000 f86f 	bl	8003ff0 <_free_r>
 8003f12:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003f14:	b111      	cbz	r1, 8003f1c <_reclaim_reent+0x40>
 8003f16:	4620      	mov	r0, r4
 8003f18:	f000 f86a 	bl	8003ff0 <_free_r>
 8003f1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f1e:	b111      	cbz	r1, 8003f26 <_reclaim_reent+0x4a>
 8003f20:	4620      	mov	r0, r4
 8003f22:	f000 f865 	bl	8003ff0 <_free_r>
 8003f26:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003f28:	b111      	cbz	r1, 8003f30 <_reclaim_reent+0x54>
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	f000 f860 	bl	8003ff0 <_free_r>
 8003f30:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003f32:	b111      	cbz	r1, 8003f3a <_reclaim_reent+0x5e>
 8003f34:	4620      	mov	r0, r4
 8003f36:	f000 f85b 	bl	8003ff0 <_free_r>
 8003f3a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003f3c:	b111      	cbz	r1, 8003f44 <_reclaim_reent+0x68>
 8003f3e:	4620      	mov	r0, r4
 8003f40:	f000 f856 	bl	8003ff0 <_free_r>
 8003f44:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003f46:	b111      	cbz	r1, 8003f4e <_reclaim_reent+0x72>
 8003f48:	4620      	mov	r0, r4
 8003f4a:	f000 f851 	bl	8003ff0 <_free_r>
 8003f4e:	6a23      	ldr	r3, [r4, #32]
 8003f50:	b1b3      	cbz	r3, 8003f80 <_reclaim_reent+0xa4>
 8003f52:	4620      	mov	r0, r4
 8003f54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003f58:	4718      	bx	r3
 8003f5a:	5949      	ldr	r1, [r1, r5]
 8003f5c:	b941      	cbnz	r1, 8003f70 <_reclaim_reent+0x94>
 8003f5e:	3504      	adds	r5, #4
 8003f60:	69e3      	ldr	r3, [r4, #28]
 8003f62:	2d80      	cmp	r5, #128	; 0x80
 8003f64:	68d9      	ldr	r1, [r3, #12]
 8003f66:	d1f8      	bne.n	8003f5a <_reclaim_reent+0x7e>
 8003f68:	4620      	mov	r0, r4
 8003f6a:	f000 f841 	bl	8003ff0 <_free_r>
 8003f6e:	e7c0      	b.n	8003ef2 <_reclaim_reent+0x16>
 8003f70:	680e      	ldr	r6, [r1, #0]
 8003f72:	4620      	mov	r0, r4
 8003f74:	f000 f83c 	bl	8003ff0 <_free_r>
 8003f78:	4631      	mov	r1, r6
 8003f7a:	e7ef      	b.n	8003f5c <_reclaim_reent+0x80>
 8003f7c:	2500      	movs	r5, #0
 8003f7e:	e7ef      	b.n	8003f60 <_reclaim_reent+0x84>
 8003f80:	bd70      	pop	{r4, r5, r6, pc}
 8003f82:	bf00      	nop
 8003f84:	2000005c 	.word	0x2000005c

08003f88 <__libc_init_array>:
 8003f88:	b570      	push	{r4, r5, r6, lr}
 8003f8a:	4d0d      	ldr	r5, [pc, #52]	; (8003fc0 <__libc_init_array+0x38>)
 8003f8c:	4c0d      	ldr	r4, [pc, #52]	; (8003fc4 <__libc_init_array+0x3c>)
 8003f8e:	1b64      	subs	r4, r4, r5
 8003f90:	10a4      	asrs	r4, r4, #2
 8003f92:	2600      	movs	r6, #0
 8003f94:	42a6      	cmp	r6, r4
 8003f96:	d109      	bne.n	8003fac <__libc_init_array+0x24>
 8003f98:	4d0b      	ldr	r5, [pc, #44]	; (8003fc8 <__libc_init_array+0x40>)
 8003f9a:	4c0c      	ldr	r4, [pc, #48]	; (8003fcc <__libc_init_array+0x44>)
 8003f9c:	f000 f880 	bl	80040a0 <_init>
 8003fa0:	1b64      	subs	r4, r4, r5
 8003fa2:	10a4      	asrs	r4, r4, #2
 8003fa4:	2600      	movs	r6, #0
 8003fa6:	42a6      	cmp	r6, r4
 8003fa8:	d105      	bne.n	8003fb6 <__libc_init_array+0x2e>
 8003faa:	bd70      	pop	{r4, r5, r6, pc}
 8003fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fb0:	4798      	blx	r3
 8003fb2:	3601      	adds	r6, #1
 8003fb4:	e7ee      	b.n	8003f94 <__libc_init_array+0xc>
 8003fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fba:	4798      	blx	r3
 8003fbc:	3601      	adds	r6, #1
 8003fbe:	e7f2      	b.n	8003fa6 <__libc_init_array+0x1e>
 8003fc0:	08004140 	.word	0x08004140
 8003fc4:	08004140 	.word	0x08004140
 8003fc8:	08004140 	.word	0x08004140
 8003fcc:	08004144 	.word	0x08004144

08003fd0 <__retarget_lock_acquire_recursive>:
 8003fd0:	4770      	bx	lr

08003fd2 <__retarget_lock_release_recursive>:
 8003fd2:	4770      	bx	lr

08003fd4 <memcpy>:
 8003fd4:	440a      	add	r2, r1
 8003fd6:	4291      	cmp	r1, r2
 8003fd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003fdc:	d100      	bne.n	8003fe0 <memcpy+0xc>
 8003fde:	4770      	bx	lr
 8003fe0:	b510      	push	{r4, lr}
 8003fe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fe6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fea:	4291      	cmp	r1, r2
 8003fec:	d1f9      	bne.n	8003fe2 <memcpy+0xe>
 8003fee:	bd10      	pop	{r4, pc}

08003ff0 <_free_r>:
 8003ff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ff2:	2900      	cmp	r1, #0
 8003ff4:	d044      	beq.n	8004080 <_free_r+0x90>
 8003ff6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ffa:	9001      	str	r0, [sp, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f1a1 0404 	sub.w	r4, r1, #4
 8004002:	bfb8      	it	lt
 8004004:	18e4      	addlt	r4, r4, r3
 8004006:	f000 f83f 	bl	8004088 <__malloc_lock>
 800400a:	4a1e      	ldr	r2, [pc, #120]	; (8004084 <_free_r+0x94>)
 800400c:	9801      	ldr	r0, [sp, #4]
 800400e:	6813      	ldr	r3, [r2, #0]
 8004010:	b933      	cbnz	r3, 8004020 <_free_r+0x30>
 8004012:	6063      	str	r3, [r4, #4]
 8004014:	6014      	str	r4, [r2, #0]
 8004016:	b003      	add	sp, #12
 8004018:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800401c:	f000 b83a 	b.w	8004094 <__malloc_unlock>
 8004020:	42a3      	cmp	r3, r4
 8004022:	d908      	bls.n	8004036 <_free_r+0x46>
 8004024:	6825      	ldr	r5, [r4, #0]
 8004026:	1961      	adds	r1, r4, r5
 8004028:	428b      	cmp	r3, r1
 800402a:	bf01      	itttt	eq
 800402c:	6819      	ldreq	r1, [r3, #0]
 800402e:	685b      	ldreq	r3, [r3, #4]
 8004030:	1949      	addeq	r1, r1, r5
 8004032:	6021      	streq	r1, [r4, #0]
 8004034:	e7ed      	b.n	8004012 <_free_r+0x22>
 8004036:	461a      	mov	r2, r3
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	b10b      	cbz	r3, 8004040 <_free_r+0x50>
 800403c:	42a3      	cmp	r3, r4
 800403e:	d9fa      	bls.n	8004036 <_free_r+0x46>
 8004040:	6811      	ldr	r1, [r2, #0]
 8004042:	1855      	adds	r5, r2, r1
 8004044:	42a5      	cmp	r5, r4
 8004046:	d10b      	bne.n	8004060 <_free_r+0x70>
 8004048:	6824      	ldr	r4, [r4, #0]
 800404a:	4421      	add	r1, r4
 800404c:	1854      	adds	r4, r2, r1
 800404e:	42a3      	cmp	r3, r4
 8004050:	6011      	str	r1, [r2, #0]
 8004052:	d1e0      	bne.n	8004016 <_free_r+0x26>
 8004054:	681c      	ldr	r4, [r3, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	6053      	str	r3, [r2, #4]
 800405a:	440c      	add	r4, r1
 800405c:	6014      	str	r4, [r2, #0]
 800405e:	e7da      	b.n	8004016 <_free_r+0x26>
 8004060:	d902      	bls.n	8004068 <_free_r+0x78>
 8004062:	230c      	movs	r3, #12
 8004064:	6003      	str	r3, [r0, #0]
 8004066:	e7d6      	b.n	8004016 <_free_r+0x26>
 8004068:	6825      	ldr	r5, [r4, #0]
 800406a:	1961      	adds	r1, r4, r5
 800406c:	428b      	cmp	r3, r1
 800406e:	bf04      	itt	eq
 8004070:	6819      	ldreq	r1, [r3, #0]
 8004072:	685b      	ldreq	r3, [r3, #4]
 8004074:	6063      	str	r3, [r4, #4]
 8004076:	bf04      	itt	eq
 8004078:	1949      	addeq	r1, r1, r5
 800407a:	6021      	streq	r1, [r4, #0]
 800407c:	6054      	str	r4, [r2, #4]
 800407e:	e7ca      	b.n	8004016 <_free_r+0x26>
 8004080:	b003      	add	sp, #12
 8004082:	bd30      	pop	{r4, r5, pc}
 8004084:	20001b60 	.word	0x20001b60

08004088 <__malloc_lock>:
 8004088:	4801      	ldr	r0, [pc, #4]	; (8004090 <__malloc_lock+0x8>)
 800408a:	f7ff bfa1 	b.w	8003fd0 <__retarget_lock_acquire_recursive>
 800408e:	bf00      	nop
 8004090:	20001b5c 	.word	0x20001b5c

08004094 <__malloc_unlock>:
 8004094:	4801      	ldr	r0, [pc, #4]	; (800409c <__malloc_unlock+0x8>)
 8004096:	f7ff bf9c 	b.w	8003fd2 <__retarget_lock_release_recursive>
 800409a:	bf00      	nop
 800409c:	20001b5c 	.word	0x20001b5c

080040a0 <_init>:
 80040a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a2:	bf00      	nop
 80040a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040a6:	bc08      	pop	{r3}
 80040a8:	469e      	mov	lr, r3
 80040aa:	4770      	bx	lr

080040ac <_fini>:
 80040ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ae:	bf00      	nop
 80040b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b2:	bc08      	pop	{r3}
 80040b4:	469e      	mov	lr, r3
 80040b6:	4770      	bx	lr
